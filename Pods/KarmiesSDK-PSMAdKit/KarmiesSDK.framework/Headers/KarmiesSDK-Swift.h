// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import CoreLocation;
@import UIKit;
@import CoreGraphics;
@import CoreText;
@import WebKit;
@import PSMAdKitSDK;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class KarmiesData;
@class KarmiesImages;
@class KarmiesRenderer;
@class KarmiesMessages;
@class KarmiesAnalytics;
@class CLLocation;
@class UIViewController;

/**
  Main Karmies configuration class.
*/
SWIFT_CLASS("_TtC10KarmiesSDK7Karmies")
@interface Karmies : NSObject
/**
  Karmies instance.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Karmies * _Nonnull shared;)
+ (Karmies * _Nonnull)shared;
/**
  Karmies data including all category and emoji content metadata.
*/
@property (nonatomic, readonly, strong) KarmiesData * _Nonnull data;
/**
  Karmies image loading for all content.
*/
@property (nonatomic, readonly, strong) KarmiesImages * _Nonnull images;
/**
  Karmies image and attributed text rendering.
*/
@property (nonatomic, readonly, strong) KarmiesRenderer * _Nonnull renderer;
/**
  Karmies message parsing.
*/
@property (nonatomic, readonly, strong) KarmiesMessages * _Nonnull messages;
/**
  Karmies analytics.
*/
@property (nonatomic, readonly, strong) KarmiesAnalytics * _Nonnull analytics;
/**
  Flag that Karmies data is ready for use.
*/
@property (nonatomic, readonly) BOOL isReady;
/**
  Flag that Karmies data has completed all processing and precaching.
*/
@property (nonatomic, readonly) BOOL isComplete;
/**
  Assigned Karmies client identifier.
*/
@property (nonatomic, copy) NSString * _Null_unspecified clientID;
/**
  Flag to periodically monitor location and display location-based content.
*/
@property (nonatomic) BOOL monitorLocation;
/**
  Internal to use for periodic location monitoring.
*/
@property (nonatomic) NSTimeInterval locationCheckInterval;
/**
  <ul>
    <li>
      Returns the current location used by Karmies for display purposes which may be up to 20 seconds stale.
    </li>
  </ul>

  returns:
  the location
*/
@property (nonatomic, readonly, strong) CLLocation * _Nullable currentLocation;
/**
  Flag to allow secret access to a debug controller by developers (defaults to true).
*/
@property (nonatomic) BOOL allowDebugController;
/**
  The PSMAdKit application ID, for showing banner and interstitial ads using PSMAdKit from within Karmies.
*/
@property (nonatomic, copy) NSString * _Nullable psmApplicationID;
/**
  Configure Karmies for use in an application and load initial data from the cloud if necessary. This should be called as early as possible after application launch to ensure correct behavior.
  \param clientID The Karmies client ID for this application.

  \param monitorLocation Flag to automatically request location access to enhance Karmies features (containing app must have Location capability configured).

  \param loadOnReachable Flag to automatically load data as soon as the network is reachable (otherwise load() must be called explicitly).

  \param ready Called when initial data is received and ready, after which categories are available for display in the UI.

  \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.

*/
- (void)configureWithClientID:(NSString * _Nonnull)clientID monitorLocation:(BOOL)monitorLocation loadOnReachable:(BOOL)loadOnReachable ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/**
  Request update of Karmies data, such as after application has been resumed, a specified time period has elapsed, or the user has initiated a refresh.
  \param reload Flag to reload from the network even if data is already cached.

  \param ready Called when initial data is received and ready, after which categories are available for display in the UI.

  \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.

*/
- (void)updateWithReload:(BOOL)reload ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/**
  Remove all current update handlers.
*/
- (void)removeAllUpdateHandlers;
/**
  Insert an emoji in the current keyboard input view.
  \param name The emoji name.

  \param categoryName The category name if added from a category.

  \param index The displayed index for the emoji.

  \param input The input if added based on user input.

  \param keyword The matching keyword if added based on a keyword.

*/
- (void)insertEmojiWithNamed:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName index:(NSInteger)index input:(NSString * _Nullable)input keyword:(NSString * _Nullable)keyword;
/**
  Show the specified emoji, opening the keyboard, changing categories, and scrolling if necessary.
  \param name The emoji name.

  \param categoryName The category name.

*/
- (void)showEmojiWithNamed:(NSString * _Nullable)name in:(NSString * _Nullable)categoryName;
/**
  Present view feature view for the emoji with specified URL.
  \param url The url for the emoji.

*/
- (UIViewController * _Nullable)presentViewFeatureControllerWith:(NSURL * _Nonnull)url;
/**
  Force Karmies to start monitoring location. This does not normally need to be called unless it was stopped externally and needs to be resumed.
*/
- (void)startMonitoringLocation;
/**
  Force Karmies to stop monitoring location. This does not normally need to be called unless there is an external need to suspend it after starting.
*/
- (void)stopMonitoringLocation;
/**
  Force a one time update of Karmies location regardless of passive monitoring.
*/
- (void)updateLocation;
/**
  Handle the application becoming active, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
*/
- (void)didBecomeActive;
/**
  Handle the application becoming inactive, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
*/
- (void)willResignActive;
/**
  Show a debug controller with advanced developer configuration.
*/
- (UIViewController * _Nullable)presentDebugController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesAnalytics")
@interface KarmiesAnalytics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)sendKeyboardCloseEvent;
- (void)sendKeyboardOpenEvent;
- (void)sendKeyboardEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendAutosuggestCloseEvent;
- (void)sendAutosuggestOpenEventWithInput:(NSString * _Nonnull)input emojiCount:(NSInteger)emojiCount;
- (void)sendAutosuggestEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendKeyboardCategoriesOpenEventWithCategoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendMessageInputEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageInputEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageImpressionEventsWithMessage:(NSString * _Nonnull)message isSent:(BOOL)isSent;
@end

@class NSCoder;

SWIFT_CLASS("_TtC10KarmiesSDK10KarmiesApp")
@interface KarmiesApp : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Nullable query;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name query:(NSString * _Nullable)query title:(NSString * _Nullable)title icon:(NSString * _Nullable)icon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesArea")
@interface KarmiesArea : NSObject <NSCoding>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, strong) CLLocation * _Nonnull location;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class KarmiesGeoplacement;
@class UIImage;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesCategory")
@interface KarmiesCategory : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified emojis;
@property (nonatomic, copy) NSArray<KarmiesGeoplacement *> * _Null_unspecified geoplacements;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/**
  <ul>
    <li>
      Return all possible emojis at any location without sort or filtering, such as for preloading.
    </li>
  </ul>

  returns:
  The list of emojis.
*/
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull possibleEmojis;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name image:(NSString * _Nonnull)image desc:(NSString * _Nonnull)desc emojis:(NSArray<NSString *> * _Nonnull)emojis localImage:(UIImage * _Nullable)localImage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  <ul>
    <li>
      Return emojis at the specified location with appropriate sorting and filtering, such as for keyboard display.
    </li>
  </ul>
  \param location The location, or nil to use last tracked location if available.


  returns:
  The list of emojis.
*/
- (NSArray<NSString *> * _Nonnull)emojisAt:(CLLocation * _Nullable)location;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@class UIButton;
@class UITextView;
@class UILabel;
@class UIView;
@class NSBundle;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesController")
@interface KarmiesController : UIViewController
@property (nonatomic, readonly, strong) UIButton * _Nonnull keyboardToggleButton;
@property (nonatomic, copy) void (^ _Nullable messageWasChangedHandler)(BOOL);
@property (nonatomic, copy) void (^ _Nullable inputWasChangedHandler)(NSString * _Nonnull, NSString * _Nullable);
@property (nonatomic) BOOL toggleEmbeddedKeyboard;
@property (nonatomic) BOOL autoSuggest;
/**
  Returns a newly initalized Karmies controller.
  \param hostInputTextView Host app text view that is used for message input.

  \param toggleEmbeddedKeyboard Flag to automatically toggle the OS keyboard open/closed opposite the Karmies keyboard.

  \param autoSuggest Flag to auto suggest emojis and display them above the input field while typing.


  returns:
  A newly initialized KarmiesController.
*/
- (nonnull instancetype)initWithHostInputTextView:(UITextView * _Nonnull)hostInputTextView toggleEmbeddedKeyboard:(BOOL)toggleEmbeddedKeyboard autoSuggest:(BOOL)autoSuggest OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)dataUpdated;
/**
  Registers UITextView object as message view to deserialize message from text property every time it’s changed.
  \param textView The text view.

*/
- (void)registerMessageTextViewWithTextView:(UITextView * _Nonnull)textView;
/**
  Registers UILabel object as message view to deserialize message from text property every time it’s changed.
  \param label The label.

*/
- (void)registerMessageLabelWithLabel:(UILabel * _Nonnull)label;
/**
  Unregisters UIView object as message view.
  \param messageView The message view.

*/
- (void)unregisterWithMessageView:(UIView * _Nonnull)messageView;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class KarmiesEmoji;

SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesData")
@interface KarmiesData : NSObject
/**
  <ul>
    <li>
      Return all possible categories at any location without sort or filtering, such as for preloading.
    </li>
  </ul>

  returns:
  The list of emojis.
*/
@property (nonatomic, readonly, copy) NSArray<KarmiesCategory *> * _Nonnull possibleCategories;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Returns keyboard categories for the specified location.
  \param location The location, or nil to use the last tracked location if available.


  returns:
  The categories.
*/
- (NSArray<KarmiesCategory *> * _Nonnull)categoriesAt:(CLLocation * _Nullable)location;
/**
  Returns an emoji from a URL token.
  \param token The URL token containing Karmies data.


  returns:
  The emoji.
*/
- (KarmiesEmoji * _Nullable)emojiFrom:(NSString * _Nonnull)token;
/**
  Returns an emoji for the given name and category.
  \param name The emoji name.


  returns:
  The emoji.
*/
- (KarmiesEmoji * _Nullable)emojiFor:(NSString * _Nonnull)name;
/**
  Returns an emoji name for an index path specifying category and emoji position, optionally at a given location.
  \param indexPath The index path where section is category and item is emoji.

  \param location The location, or nil to use the last tracked location if available.


  returns:
  The emoji name.
*/
- (NSString * _Nonnull)emojiNameFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location;
/**
  Returns an emoji for an index path specifying category and emoji position, optionally at a given location.
  \param indexPath The index path where section is category and item is emoji.

  \param location The location, or nil to use the last tracked location if available.


  returns:
  The emoji for this position.
*/
- (KarmiesEmoji * _Nullable)emojiFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location;
/**
  Returns suggested emojis for input text.
  \param text The input text.

  \param includePartialMatches Flag to return partial matches along with exact matches.

  \param location The location, or nil to use the last tracked location if available.

  \param completion Called when complete with results and flag indicating partial matches are present.

*/
- (void)suggestedEmojisFor:(NSString * _Nonnull)text includePartialMatches:(BOOL)includePartialMatches at:(CLLocation * _Nullable)location :(void (^ _Nonnull)(NSArray<KarmiesEmoji *> * _Nonnull, NSArray<NSString *> * _Nonnull, BOOL))completion;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesEmoji")
@interface KarmiesEmoji : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified keywords;
@property (nonatomic, copy) NSString * _Nullable headline;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable largeImage;
@property (nonatomic, copy) NSString * _Nullable unicode;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable emoticon;
@property (nonatomic, copy) NSString * _Nullable author;
@property (nonatomic, copy) NSArray<KarmiesApp *> * _Nullable apps;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, strong) UIImage * _Nullable localLargeImage;
@property (nonatomic, copy) NSString * _Nullable localAction;
@property (nonatomic, copy) NSString * _Nullable localInfo;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic) BOOL remote;
@property (nonatomic, readonly) BOOL isRead;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull largeImageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull linkURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull infoURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name desc:(NSString * _Nonnull)desc keywords:(NSArray<NSString *> * _Nonnull)keywords image:(NSString * _Nullable)image largeImage:(NSString * _Nullable)largeImage localImage:(UIImage * _Nullable)localImage localLargeImage:(UIImage * _Nullable)localLargeImage localAction:(NSString * _Nullable)localAction apps:(NSArray<KarmiesApp *> * _Nullable)apps payload:(NSString * _Nullable)payload remote:(BOOL)remote;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@class KarmiesLocation;
@class KarmiesLink;

SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEntity")
@interface KarmiesEntity : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, strong) KarmiesLocation * _Nullable locationValue;
@property (nonatomic, strong) KarmiesLink * _Nullable linkValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesGeoplacement")
@interface KarmiesGeoplacement : KarmiesCategory
@property (nonatomic, copy) NSString * _Null_unspecified emoji;
@property (nonatomic, copy) NSArray<KarmiesArea *> * _Null_unspecified areas;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesImages")
@interface KarmiesImages : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Returns an image for a category.
  \param category The category.

  \param async Flag to return asyncrhonously even if the image is cached.

  \param completion Called with the image when loaded, synchronously if cached and async was not specified, else asynchronously.


  returns:
  True if the image is cached completion was called synchronously.
*/
- (BOOL)imageFor:(KarmiesCategory * _Nonnull)category async:(BOOL)async completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
@end


/**
  View controller that wraps the Karmies keyboard view for full screen use, such as in a Messages app extension.
*/
SWIFT_CLASS("_TtC10KarmiesSDK29KarmiesKeyboardViewController")
@interface KarmiesKeyboardViewController : UIViewController
- (void)viewDidLoad;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)dataUpdated;
- (void)prepareToTransition;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesLink")
@interface KarmiesLink : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz;
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class CLPlacemark;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesLocation")
@interface KarmiesLocation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable street;
@property (nonatomic, copy) NSString * _Nullable locality;
@property (nonatomic, copy) NSString * _Nullable phoneNumberDisplay;
@property (nonatomic, copy) NSString * _Nullable phoneNumberValue;
@property (nonatomic, copy) NSString * _Nullable website;
@property (nonatomic, copy) NSString * _Nullable priceLevel;
@property (nonatomic, copy) NSString * _Nullable rating;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlacemark:(CLPlacemark * _Nonnull)placemark;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSAttributedString;
@class UIFont;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesMessages")
@interface KarmiesMessages : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/**
  Returns serialized message for the attributed text.
  \param attributedText Attributed text containing emojis.


  returns:
  Plain text string with any emojis serializd into links.
*/
- (NSString * _Nonnull)serializeMessageFrom:(NSAttributedString * _Nonnull)attributedText;
/**
  Deserializes a message with any embedded Karmies into an attributed string for display.
  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param completion Called with an attributed string with any Karmies embedded once ready.

*/
- (void)deserializeMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing completion:(void (^ _Nonnull)(NSAttributedString * _Nonnull))completion;
/**
  Checks if the message contains serialized emojis.
  \param message The message.


  returns:
  True if it contains serialized emojis.
*/
- (BOOL)isSerializedMessage:(NSString * _Nonnull)message;
/**
  Returns size of message after deserialization with the according parameters.
  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param font The font for deserialized message.

  \param maxWidth Maximum width of deserialized message.


  returns:
  The size of deserialized message.
*/
- (CGSize)measureSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font maxWidth:(CGFloat)maxWidth;
/**
  Draws the message with according parameters inside the frame.
  \param message The serialized message.

  \param outgoing Is the message outgoing.

  \param frame The frame where the message will be drawn.

  \param font The font for the message.

*/
- (void)drawSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing insideFrame:(CGRect)frame withFont:(UIFont * _Nonnull)font;
/**
  Returns the link from the message at the point if it’s presented
  \param point The point inside the message frame.

  \param frame The message frame.

  \param message The serialized message.

  \param outgoing Is the message is outgoing/ingoing.

  \param font The font for the message.


  returns:
  The link if it’s presented or nil.
*/
- (NSString * _Nullable)linkAt:(CGPoint)point inside:(CGRect)frame with:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font;
/**
  Returns the link from the textView at the point if it’s presented
  \param point The point inside the message frame.

  \param textView The textView.

  \param outgoing Is the message is outgoing/ingoing.


  returns:
  The link if one is found or nil.
*/
- (NSString * _Nullable)linkAt:(CGPoint)point in:(UITextView * _Nonnull)textView outgoing:(BOOL)outgoing;
@end


SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesModalFeatureViewController")
@interface KarmiesModalFeatureViewController : UIViewController
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesPayload")
@interface KarmiesPayload : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, copy) NSString * _Nullable emoji;
@property (nonatomic, copy) NSArray<KarmiesEntity *> * _Nullable entities;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithClazz:(NSString * _Nonnull)clazz emoji:(NSString * _Nonnull)emoji entities:(NSArray<KarmiesEntity *> * _Nonnull)entities;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
@property (nonatomic, readonly, copy) NSString * _Nonnull embedded;
+ (KarmiesPayload * _Nullable)payloadForURL:(NSURL * _Nullable)url;
+ (NSURL * _Nullable)emptyURLWithEmoji:(NSString * _Nonnull)emoji;
+ (NSURL * _Nullable)ensurePublisherForURL:(NSURL * _Nullable)url;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesRenderer")
@interface KarmiesRenderer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesUtils")
@interface KarmiesUtils : NSObject
/**
  Creates UIFont object for the CTFont object using name and size.
*/
+ (UIFont * _Nonnull)UIFontFromCTFont:(CTFontRef _Nonnull)font;
/**
  Modifies UITextView object’s text insets and placeholder view to make free space on the left to place button there.
*/
+ (void)placeButton:(UIButton * _Nonnull)button onLeftOf:(UITextView * _Nonnull)textView withPlaceholder:(UIView * _Nullable)placeholderView in:(UIView * _Nullable)superview;
+ (NSArray<KarmiesCategory *> * _Nonnull)joinWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories geoplacements:(NSArray<KarmiesGeoplacement *> * _Nonnull)geoplacements location:(CLLocation * _Nonnull)location;
+ (NSArray<NSString *> * _Nonnull)joinWithEmojis:(NSArray<NSString *> * _Nonnull)emojis geoplacements:(NSArray<KarmiesGeoplacement *> * _Nonnull)geoplacements location:(CLLocation * _Nonnull)location;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigation;

SWIFT_CLASS("_TtC10KarmiesSDK24KarmiesWebViewController")
@interface KarmiesWebViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK31KarmiesWebFeatureViewController")
@interface KarmiesWebFeatureViewController : KarmiesWebViewController
@property (nonatomic, strong) KarmiesEmoji * _Null_unspecified emoji;
@property (nonatomic, copy) NSString * _Nullable categoryName;
@property (nonatomic, copy) void (^ _Nullable completionHandler)(NSString * _Nullable);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)close;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset SWIFT_UNAVAILABLE;
@end

@class PSMAdView;
@class PSMInterstitialAd;

@interface KarmiesWebFeatureViewController (SWIFT_EXTENSION(KarmiesSDK)) <PSMAdViewDelegate, PSMInterstitialAdDelegate>
@property (nonatomic, readonly, strong) UIViewController * _Nullable adTopViewController;
- (void)psmAdViewAdSucceeded:(PSMAdView * _Nonnull)psmAdView;
- (void)psmAdViewAdFailed:(PSMAdView * _Nonnull)psmAdView;
- (void)psmInterstitialAdSucceeded:(PSMInterstitialAd * _Nonnull)psmInterstitialAd;
- (void)psmInterstitialAdFailed:(PSMInterstitialAd * _Nonnull)psmInterstitialAd;
- (void)psmInterstitialAdInterstitialClosed:(PSMInterstitialAd * _Nonnull)psmInterstitialAd;
@end


@class UIImagePickerController;

@interface KarmiesWebViewController (SWIFT_EXTENSION(KarmiesSDK)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
@end

#pragma clang diagnostic pop
