// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import CoreLocation;
@import CoreFoundation;
@import Messages;
@import CoreText;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;

SWIFT_CLASS("_TtC10KarmiesSDK11CacheObject")
@interface CacheObject : NSObject <NSCoding>
@property (nonatomic, readonly, strong) id _Nonnull value;
@property (nonatomic, readonly, copy) NSDate * _Nonnull expiryDate;
- (nonnull instancetype)initWithValue:(id _Nonnull)value expiryDate:(NSDate * _Nonnull)expiryDate OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isExpired SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSOperationQueue;
@class NSURLSessionTask;
@class NSURLCredential;
@class NSURLSession;
@class NSHTTPURLResponse;
@class NSInputStream;
@class NSURLAuthenticationChallenge;

SWIFT_CLASS("_TtC10KarmiesSDK12TaskDelegate")
@interface TaskDelegate : NSObject
@property (nonatomic, readonly, strong) NSOperationQueue * _Nonnull queue;
@property (nonatomic, readonly, copy) NSData * _Nullable data;
@property (nonatomic) NSError * _Nullable error;
@property (nonatomic, strong) NSURLSessionTask * _Nullable task;
@property (nonatomic, strong) NSURLCredential * _Nullable credential;
@property (nonatomic, strong) id _Nullable metrics;
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nullable)task OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
@property (nonatomic, copy) NSURLRequest * _Nullable (^ _Nullable taskWillPerformHTTPRedirection)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull);
@property (nonatomic, copy) NSInputStream * _Nullable (^ _Nullable taskNeedNewBodyStream)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable taskDidCompleteWithError)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSError * _Nullable);
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSURLSessionDataTask;
@class NSProgress;
@class NSURLResponse;
@class NSURLSessionDownloadTask;
@class NSCachedURLResponse;

SWIFT_CLASS("_TtC10KarmiesSDK16DataTaskDelegate")
@interface DataTaskDelegate : TaskDelegate <NSURLSessionDataDelegate, NSURLSessionDelegate, NSURLSessionTaskDelegate>
@property (nonatomic, readonly, strong) NSURLSessionDataTask * _Nonnull dataTask;
@property (nonatomic, readonly, copy) NSData * _Nullable data;
@property (nonatomic, strong) NSProgress * _Nonnull progress;
@property (nonatomic, copy) void (^ _Nullable dataStream)(NSData * _Nonnull);
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nullable)task OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
@property (nonatomic, copy) enum NSURLSessionResponseDisposition (^ _Nullable dataTaskDidReceiveResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable dataTaskDidBecomeDownloadTask)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLSessionDownloadTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveData)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSData * _Nonnull);
@property (nonatomic, copy) NSCachedURLResponse * _Nullable (^ _Nullable dataTaskWillCacheResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull);
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10KarmiesSDK20DownloadTaskDelegate")
@interface DownloadTaskDelegate : TaskDelegate <NSURLSessionDownloadDelegate, NSURLSessionDelegate, NSURLSessionTaskDelegate>
@property (nonatomic, readonly, strong) NSURLSessionDownloadTask * _Nonnull downloadTask;
@property (nonatomic, strong) NSProgress * _Nonnull progress;
@property (nonatomic, copy) NSData * _Nullable resumeData;
@property (nonatomic, readonly, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSURL * _Nullable temporaryURL;
@property (nonatomic, copy) NSURL * _Nullable destinationURL;
@property (nonatomic, readonly, copy) NSURL * _Nullable fileURL;
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nullable)task OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
@property (nonatomic, copy) NSURL * _Nonnull (^ _Nullable downloadTaskDidFinishDownloadingToURL)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, NSURL * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidWriteData)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t, int64_t);
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidResumeAtOffset)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t);
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

@class UIColor;

SWIFT_CLASS("_TtC10KarmiesSDK11EasyTipView")
@interface EasyTipView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleRotation SWIFT_AVAILABILITY(ios,introduced=8.0);
- (void)handleTap;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface EasyTipView (SWIFT_EXTENSION(KarmiesSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class UIBarItem;

@interface EasyTipView (SWIFT_EXTENSION(KarmiesSDK))
- (void)showWithAnimated:(BOOL)animated forItem:(UIBarItem * _Nonnull)item withinSuperView:(UIView * _Nullable)superview;
- (void)showWithAnimated:(BOOL)animated forView:(UIView * _Nonnull)view withinSuperview:(UIView * _Nullable)superview;
- (void)dismissWithCompletion:(void (^ _Nullable)(void))completion;
@end


SWIFT_CLASS("_TtC10KarmiesSDK29ImageDownloaderSessionHandler")
@interface ImageDownloaderSessionHandler : NSObject <NSURLSessionDataDelegate, NSURLSessionDelegate, NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KarmiesData;
@class KarmiesImages;
@class KarmiesRenderer;
@class KarmiesMessages;
@class KarmiesTooltips;
@class KarmiesAnalytics;
@class UIApplication;
@class UIViewController;
@class CLLocation;
@class CLPlacemark;
@class KarmiesController;
@class KarmiesEmoji;

/// Main Karmies configuration class.
SWIFT_CLASS("_TtC10KarmiesSDK7Karmies")
@interface Karmies : NSObject
/// Karmies instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Karmies * _Nonnull shared;)
+ (Karmies * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Karmies data including all category and emoji content metadata.
@property (nonatomic, readonly, strong) KarmiesData * _Nonnull data;
/// Karmies image loading for all content.
@property (nonatomic, readonly, strong) KarmiesImages * _Nonnull images;
/// Karmies image and attributed text rendering.
@property (nonatomic, readonly, strong) KarmiesRenderer * _Nonnull renderer;
/// Karmies message parsing.
@property (nonatomic, readonly, strong) KarmiesMessages * _Nonnull messages;
/// Karmies tooltips.
@property (nonatomic, readonly, strong) KarmiesTooltips * _Nonnull tooltips;
/// Karmies analytics.
@property (nonatomic, readonly, strong) KarmiesAnalytics * _Nonnull analytics;
@property (nonatomic, readonly, strong) UIApplication * _Nullable application;
@property (nonatomic, strong) UIViewController * _Nullable messagesAppViewController;
/// Flag that Karmies data is ready for use.
@property (nonatomic, readonly) BOOL isReady;
/// Flag that Karmies data has completed all processing and precaching.
@property (nonatomic, readonly) BOOL isComplete;
/// Assigned Karmies client identifier.
@property (nonatomic, copy) NSString * _Null_unspecified clientID;
/// Flag to automatically monitor location for Karmies features that require it. The containing app must have the “when in use” location usage description configured.
@property (nonatomic) BOOL monitorLocation;
/// Flag to always monitor location including infrequent background updates for features that are enhanced by it. The containing app must also have “always” location usage description configured but does not need to enable any specific background modes. If the app does have any background modes they may be used for updates, otherwise it will run in the backround only briefly such as when the user has recently left the app before it suspends or when a geofenced region is entered or exited.
@property (nonatomic) BOOL alwaysLocation;
/// Flag to show region enter and exit alerts for debugging.
@property (nonatomic) BOOL showRegionAlerts;
/// Flag to enable debug logging.
@property (nonatomic) BOOL debugLogging;
/// Determine if location is currently being monitored.
@property (nonatomic, readonly) BOOL isMonitoringLocation;
/// Interval to use for periodic location monitoring.
@property (nonatomic) NSTimeInterval locationCheckInterval;
/// Maximum number of geofence regions to monitor, defaults to the iOS app limit is 20.
@property (nonatomic) NSInteger regionLimit;
/// <ul>
///   <li>
///     Returns the current location used by Karmies for display purposes which may be up to 20 seconds stale.
///   </li>
/// </ul>
///
/// returns:
/// the location
@property (nonatomic, readonly, strong) CLLocation * _Nullable currentLocation;
/// <ul>
///   <li>
///     Returns the current placemark used by Karmies for display purposes which may be up to 20 seconds stale.
///   </li>
/// </ul>
///
/// returns:
/// the location
@property (nonatomic, readonly, strong) CLPlacemark * _Nullable currentPlacemark;
/// Flag to allow secret access to a debug controller by developers (defaults to true).
@property (nonatomic) BOOL allowDebugController;
/// Configure Karmies for use in an application and load initial data from the cloud if necessary. This should be called as early as possible after application launch to ensure correct behavior.
/// \param application the running UIApplication instance if deployed in a full app, or nil if an app extension
///
/// \param clientID the Karmies client ID for this application
///
/// \param autoUpdate flag to automatically update data periodically when the network is reachable (otherwise update() must be called explicitly), defaults to true
///
/// \param monitorLocation flag to automatically monitor location for Karmies features that require it. The containing app must have the “when in use” location usage description configured
///
/// \param alwaysLocation flag to always monitor location including infrequent background updates for features that are enhanced by it. The containing app must also have “always” location usage description configured but does not need to enable any specific background modes. If the app does have any background modes they may be used for updates, otherwise it will run in the backround only briefly such as when the user has recently left the app before it suspends or when a geofenced region is entered or exited
///
/// \param ready called when initial data is received and ready, after which categories are available for display in the UI
///
/// \param complete called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin
///
- (void)configureWithApplication:(UIApplication * _Nullable)application clientID:(NSString * _Nonnull)clientID autoUpdate:(BOOL)autoUpdate monitorLocation:(BOOL)monitorLocation alwaysLocation:(BOOL)alwaysLocation ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/// Request update of Karmies data, such as after application has been resumed, a specified time period has elapsed, or the user has initiated a refresh.
/// \param reload Flag to reload from the network even if data is already cached.
///
/// \param ready Called when initial data is received and ready, after which categories are available for display in the UI.
///
/// \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.
///
- (void)updateWithReload:(BOOL)reload ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/// Remove all current update handlers.
- (void)removeAllUpdateHandlers;
- (void)registerWithController:(KarmiesController * _Nonnull)controller;
- (void)unregisterWithController:(KarmiesController * _Nonnull)controller;
- (void)notifyControllersEmojiWasMarkedAsReadWithEmoji:(KarmiesEmoji * _Nonnull)emoji;
- (void)notifyControllersMessageWasChangedWithForced:(BOOL)forced;
- (void)notifyHandlersDataReady;
- (void)notifyHandlersDataUpdated;
- (void)notifyControllersSaveInput;
- (void)notifyControllersRestoreInput;
/// Insert an emoji in the current keyboard input view.
/// \param name The emoji name.
///
/// \param categoryName The category name if added from a category.
///
/// \param index The displayed index for the emoji.
///
/// \param input The input if added based on user input.
///
/// \param keyword The matching keyword if added based on a keyword.
///
- (void)insertEmojiWithNamed:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName index:(NSInteger)index input:(NSString * _Nullable)input keyword:(NSString * _Nullable)keyword;
/// Show the specified emoji, opening the keyboard, changing categories, and scrolling if necessary.
/// \param name The emoji name.
///
/// \param categoryName The category name.
///
- (void)showEmojiWithNamed:(NSString * _Nullable)name in:(NSString * _Nullable)categoryName;
- (UIViewController * _Nullable)presentEditFeatureControllerFor:(KarmiesEmoji * _Nonnull)emoji completionHandler:(void (^ _Nonnull)(NSString * _Nullable))completionHandler;
/// Present view feature view for the emoji with specified URL.
/// \param url The url for the emoji.
///
- (UIViewController * _Nullable)presentViewFeatureControllerWith:(NSURL * _Nonnull)url;
- (UIViewController * _Nullable)presentFeatureController:(UIViewController * _Nonnull)viewController;
- (void)dismissFeatureController;
/// Force Karmies to start monitoring location. This does not normally need to be called unless it was stopped externally and needs to be resumed.
- (void)startMonitoringLocation;
/// Force Karmies to stop monitoring location. This does not normally need to be called unless there is an external need to suspend it after starting.
- (void)stopMonitoringLocation;
/// Force a one time update of Karmies location regardless of passive monitoring.
- (void)updateLocation;
/// Handle the application becoming active, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
- (void)didBecomeActive;
/// Handle the application becoming inactive, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
- (void)willResignActive;
- (void)willEnterForeground;
/// Show a debug controller with advanced developer configuration.
- (UIViewController * _Nullable)presentDebugController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class UILongPressGestureRecognizer;
@class UITapGestureRecognizer;
@class UIButton;

SWIFT_CLASS("_TtC10KarmiesSDK21KarmiesCircleMenuView")
@interface KarmiesCircleMenuView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_BACKGROUND_NORMAL;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_BACKGROUND_NORMAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_BACKGROUND_ACTIVE;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_BACKGROUND_ACTIVE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_BORDER;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_BORDER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_OPENING_DELAY;)
+ (NSString * _Nonnull)CIRCLE_MENU_OPENING_DELAY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_RADIUS;)
+ (NSString * _Nonnull)CIRCLE_MENU_RADIUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_MAX_ANGLE;)
+ (NSString * _Nonnull)CIRCLE_MENU_MAX_ANGLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_DIRECTION;)
+ (NSString * _Nonnull)CIRCLE_MENU_DIRECTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_DEPTH;)
+ (NSString * _Nonnull)CIRCLE_MENU_DEPTH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_RADIUS;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_RADIUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_BORDER_WIDTH;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_BORDER_WIDTH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_TAP_MODE;)
+ (NSString * _Nonnull)CIRCLE_MENU_TAP_MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_LINE_MODE;)
+ (NSString * _Nonnull)CIRCLE_MENU_LINE_MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BACKGROUND_BLUR;)
+ (NSString * _Nonnull)CIRCLE_MENU_BACKGROUND_BLUR SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_BUTTON_TINT;)
+ (NSString * _Nonnull)CIRCLE_MENU_BUTTON_TINT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CIRCLE_MENU_ALLOW_ANIMATION_INTERACTION;)
+ (NSString * _Nonnull)CIRCLE_MENU_ALLOW_ANIMATION_INTERACTION SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull buttons;
@property (nonatomic) CGFloat startingAngle;
- (nonnull instancetype)initUsing:(NSDictionary<NSString *, id> * _Nonnull)anOptionsDictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initAt:(CGPoint)aPoint using:(NSDictionary<NSString *, id> * _Nonnull)anOptionsDictionary with:(NSArray<UIImage *> * _Nonnull)anImageArray OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)openMenuWith:(UIGestureRecognizer * _Nonnull)aRecognizer;
- (void)openMenu;
- (void)closeMenu;
- (void)gestureChanged:(UILongPressGestureRecognizer * _Nonnull)sender;
- (void)handleTap:(UITapGestureRecognizer * _Nonnull)sender;
- (void)circleButtonTapped:(UIButton * _Nonnull)sender;
@end

@class NSTimer;

SWIFT_CLASS("_TtC10KarmiesSDK27KarmiesActionCircleMenuView")
@interface KarmiesActionCircleMenuView : KarmiesCircleMenuView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)finishGestureWithTimer:(NSTimer * _Nonnull)timer;
- (void)closeMenuWithForceClose:(BOOL)forceClose;
- (void)closeMenu;
- (void)quickTap;
- (nonnull instancetype)initUsing:(NSDictionary<NSString *, id> * _Nonnull)anOptionsDictionary SWIFT_UNAVAILABLE;
- (nonnull instancetype)initAt:(CGPoint)aPoint using:(NSDictionary<NSString *, id> * _Nonnull)anOptionsDictionary with:(NSArray<UIImage *> * _Nonnull)anImageArray SWIFT_UNAVAILABLE;
@end


@interface KarmiesActionCircleMenuView (SWIFT_EXTENSION(KarmiesSDK))
- (void)circleMenuOpened;
- (void)circleMenuActivatedButtonWith:(NSInteger)anIndex;
- (void)circleMenuClosed;
- (void)finishOpened;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesAnalytics")
@interface KarmiesAnalytics : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesAnalytics * _Nonnull shared;)
+ (KarmiesAnalytics * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull agentID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)configure;
- (void)sendKeyboardCloseEvent;
- (void)sendKeyboardOpenEvent;
- (void)sendKeyboardEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendAutosuggestCloseEvent;
- (void)sendAutosuggestOpenEventWithInput:(NSString * _Nonnull)input emojiCount:(NSInteger)emojiCount;
- (void)sendAutosuggestEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutoreplaceEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutoreplaceEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendKeyboardCategoriesOpenEventWithCategoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendMessageInputEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageInputEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendRegionEmojisEnterEventWithEmojiName:(NSString * _Nonnull)emojiName duration:(double)duration;
- (void)sendRegionEmojisExitEventWithEmojiName:(NSString * _Nonnull)emojiName duration:(double)duration;
- (void)sendRegionCategoriesEnterEventWithCategoryName:(NSString * _Nonnull)categoryName duration:(double)duration;
- (void)sendRegionCategoriesExitEventWithCategoryName:(NSString * _Nonnull)categoryName duration:(double)duration;
- (void)sendMessageImpressionEventsWithMessage:(NSString * _Nonnull)message isSent:(BOOL)isSent;
/// Immediately flush all events that have not automatically been sent at foreground, background, or periodic intervals.
- (void)flushEvents;
- (void)publishActive;
@end


SWIFT_CLASS("_TtC10KarmiesSDK10KarmiesApp")
@interface KarmiesApp : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Nullable query;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name query:(NSString * _Nullable)query title:(NSString * _Nullable)title icon:(NSString * _Nullable)icon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesArea")
@interface KarmiesArea : NSObject <NSCoding>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, strong) CLLocation * _Nonnull location;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class KarmiesCategory;
@class KarmiesGeoplacement;
@class KarmiesOptions;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesCategories")
@interface KarmiesCategories : NSObject <NSCoding>
@property (nonatomic, copy) NSArray<KarmiesCategory *> * _Null_unspecified entities;
@property (nonatomic, copy) NSArray<KarmiesGeoplacement *> * _Null_unspecified geoplacements;
@property (nonatomic, strong) KarmiesOptions * _Null_unspecified options;
- (nonnull instancetype)initWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories geoplacements:(NSArray<KarmiesGeoplacement *> * _Nonnull)geoplacements options:(KarmiesOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC10KarmiesSDK31KarmiesCategoriesCollectionView")
@interface KarmiesCategoriesCollectionView : UICollectionView
- (void)reloadData;
- (void)layoutSubviews;
- (void)fixLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesCategory")
@interface KarmiesCategory : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified emojis;
@property (nonatomic, copy) NSArray<KarmiesGeoplacement *> * _Null_unspecified geoplacements;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// <ul>
///   <li>
///     Return all possible emojis at any location without sort or filtering, such as for preloading.
///   </li>
/// </ul>
///
/// returns:
/// The list of emojis.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull possibleEmojis;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name image:(NSString * _Nonnull)image desc:(NSString * _Nonnull)desc emojis:(NSArray<NSString *> * _Nonnull)emojis;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     Return emojis at the specified location with appropriate sorting and filtering, such as for keyboard display.
///   </li>
/// </ul>
/// \param location The location, or nil to use last tracked location if available.
///
///
/// returns:
/// The list of emojis.
- (NSArray<NSString *> * _Nonnull)emojisAt:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


@class NSError;
enum KarmiesImageSize : NSInteger;

SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesClient")
@interface KarmiesClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesClient * _Nonnull shared;)
+ (KarmiesClient * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull linkURL;)
+ (NSString * _Nonnull)linkURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull contentURL;)
+ (NSString * _Nonnull)contentURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull categoriesFormat;)
+ (NSString * _Nonnull)categoriesFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setCategoriesFormat:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull searchIndexFormat;)
+ (NSString * _Nonnull)searchIndexFormat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull linkFormat;)
+ (NSString * _Nonnull)linkFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setLinkFormat:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull infoFormat;)
+ (NSString * _Nonnull)infoFormat SWIFT_WARN_UNUSED_RESULT;
+ (void)setInfoFormat:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull imageFormat;)
+ (NSString * _Nonnull)imageFormat SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull largeImageFormat;)
+ (NSString * _Nonnull)largeImageFormat SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)getCategoriesWithReload:(BOOL)reload completion:(void (^ _Nonnull)(NSArray<KarmiesCategory *> * _Nullable, NSArray<KarmiesGeoplacement *> * _Nullable, KarmiesOptions * _Nullable, NSError * _Nullable))completion;
- (void)getSearchIndexWithReload:(BOOL)reload completion:(void (^ _Nonnull)(NSDictionary<NSString *, KarmiesEmoji *> * _Nullable, NSError * _Nullable))completion;
- (NSURL * _Nullable)categoriesURL SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)searchIndexURL SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)infoURLWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)imageURLWithName:(NSString * _Nonnull)name image:(NSString * _Nullable)image size:(enum KarmiesImageSize)size SWIFT_WARN_UNUSED_RESULT;
- (NSURL * _Nullable)ensurePublisherForURL:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextView;
@class InputTextViewDelegate;
@class InputTextViewGestureRecognizerDelegate;
@class MessageTextViewDelegate;
@class KarmiesKeyboardView;
@class KarmiesKeyboardToggleButton;
@class UILabel;
@class NSNotification;
@class NSBundle;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesController")
@interface KarmiesController : UIViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull suggestionReuseIdentifier;)
+ (NSString * _Nonnull)suggestionReuseIdentifier SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) UITextView * _Nonnull inputTextView;
@property (nonatomic, strong) InputTextViewDelegate * _Null_unspecified inputTextViewDelegate;
@property (nonatomic, strong) InputTextViewGestureRecognizerDelegate * _Null_unspecified inputTextViewGestureRecognizerDelegate;
@property (nonatomic, strong) MessageTextViewDelegate * _Null_unspecified messageTextViewDelegate;
@property (nonatomic, readonly, strong) KarmiesKeyboardView * _Nonnull keyboardView;
@property (nonatomic, readonly, strong) KarmiesKeyboardToggleButton * _Null_unspecified keyboardToggleButton;
@property (nonatomic, copy) void (^ _Nullable messageWasChangedHandler)(BOOL);
@property (nonatomic, copy) void (^ _Nullable inputWasChangedHandler)(NSString * _Nonnull, NSString * _Nullable);
@property (nonatomic) BOOL toggleEmbeddedKeyboard;
@property (nonatomic) BOOL autoSuggest;
@property (nonatomic) BOOL autoReplace;
@property (nonatomic) BOOL showToggleTooltip;
@property (nonatomic) BOOL showInputTooltip;
/// Returns a newly initalized Karmies controller.
/// \param hostInputTextView host app text view that is used for message input
///
/// \param toggleEmbeddedKeyboard flag to automatically toggle the OS keyboard open/closed opposite the Karmies keyboard
///
/// \param autoSuggest flag to auto suggest emojis and display them above the input field while typing
///
/// \param autoReplace flag to auto replace unicode emojis with Karmies emojis in the input field while typing
///
/// \param showToggleTooltip flag to show a one-time tooltip for the Karmies toggle button
///
/// \param showInputTooltip flag to show a one-time tooltip for Karmies emojis in the text input
///
///
/// returns:
/// a newly initialized KarmiesController
- (nonnull instancetype)initWithHostInputTextView:(UITextView * _Nonnull)hostInputTextView toggleEmbeddedKeyboard:(BOOL)toggleEmbeddedKeyboard autoSuggest:(BOOL)autoSuggest autoReplace:(BOOL)autoReplace showToggleTooltip:(BOOL)showToggleTooltip showInputTooltip:(BOOL)showInputTooltip OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)karmiesDataReady;
- (void)karmiesDataUpdated;
- (void)reachabilityWasChanged:(BOOL)isReachable;
- (void)saveInput;
- (void)restoreInput;
/// Registers UITextView object as message view to deserialize message from text property every time it’s changed.
/// \param textView The text view.
///
- (void)registerMessageTextViewWithTextView:(UITextView * _Nonnull)textView;
/// Registers UILabel object as message view to deserialize message from text property every time it’s changed.
/// \param label The label.
///
- (void)registerMessageLabelWithLabel:(UILabel * _Nonnull)label;
/// Unregisters UIView object as message view.
/// \param messageView The message view.
///
- (void)unregisterWithMessageView:(UIView * _Nonnull)messageView;
- (void)insertEmojiWithNamed:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName index:(NSInteger)index input:(NSString * _Nullable)input keyword:(NSString * _Nullable)keyword unicode:(NSString * _Nullable)unicode feature:(NSString * _Nullable)feature;
- (void)showEmojiWithNamed:(NSString * _Nullable)name in:(NSString * _Nullable)categoryName;
- (void)inputTextViewTappedWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)autoSuggestIfNecessary;
- (void)autoReplaceIfNecessary;
- (void)keyboardDidShow:(NSNotification * _Nonnull)notification;
- (void)keyboardDidHide:(NSNotification * _Nonnull)notification;
- (void)keyboardToggleButtonTappedWithSender:(NSObject * _Nonnull)sender;
- (void)backspaceButtonTappedWithButton:(UIButton * _Nonnull)button;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesData")
@interface KarmiesData : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesData * _Nonnull shared;)
+ (KarmiesData * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull emojisKey;)
+ (NSString * _Nonnull)emojisKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull categoriesKey;)
+ (NSString * _Nonnull)categoriesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull unicodesKey;)
+ (NSString * _Nonnull)unicodesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull readEmojiPayloadsKey;)
+ (NSString * _Nonnull)readEmojiPayloadsKey SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Return all possible categories at any location without sort or filtering, such as for preloading.
///   </li>
/// </ul>
///
/// returns:
/// the categories
@property (nonatomic, readonly, copy) NSArray<KarmiesCategory *> * _Nonnull possibleCategories;
/// <ul>
///   <li>
///     Return all possible geoplacements at any location without sort or filtering, such as for geofencing.
///   </li>
/// </ul>
///
/// returns:
/// the geoplacements
@property (nonatomic, readonly, copy) NSArray<KarmiesGeoplacement *> * _Nonnull possibleGeoplacements;
/// <ul>
///   <li>
///     Return all possible areas for any geoplacement without sort or filtering, such as for geofencing.
///   </li>
/// </ul>
///
/// returns:
/// the areas
@property (nonatomic, readonly, copy) NSDictionary<KarmiesArea *, KarmiesGeoplacement *> * _Nonnull possibleGeoplacementAreas;
/// <ul>
///   <li>
///     Return the configured keyboard options.
///   </li>
/// </ul>
///
/// returns:
/// the options
@property (nonatomic, readonly, strong) KarmiesOptions * _Nonnull options;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadWithReload:(BOOL)reload ready:(void (^ _Nonnull)(void))ready complete:(void (^ _Nonnull)(void))complete;
/// Returns keyboard categories for the specified location.
/// \param location the location, or nil to use the last tracked location if available
///
/// \param hidden flag to include hidden categories
///
///
/// returns:
/// the categories
- (NSArray<KarmiesCategory *> * _Nonnull)categoriesAt:(CLLocation * _Nullable)location hidden:(BOOL)hidden SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji from a URL token.
/// \param token The URL token containing Karmies data.
///
///
/// returns:
/// The emoji.
- (KarmiesEmoji * _Nullable)emojiFrom:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji for the given name and category.
/// \param name The emoji name.
///
///
/// returns:
/// The emoji.
- (KarmiesEmoji * _Nullable)emojiFor:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji name for an index path specifying category and emoji position, optionally at a given location.
/// \param indexPath The index path where section is category and item is emoji.
///
/// \param location The location, or nil to use the last tracked location if available.
///
///
/// returns:
/// The emoji name.
- (NSString * _Nonnull)emojiNameFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji for an index path specifying category and emoji position, optionally at a given location.
/// \param indexPath The index path where section is category and item is emoji.
///
/// \param location The location, or nil to use the last tracked location if available.
///
///
/// returns:
/// The emoji for this position.
- (KarmiesEmoji * _Nullable)emojiFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
/// Returns suggested emojis for input text.
/// \param text the input text
///
/// \param includePartialMatches flag to return partial matches along with exact matches
///
/// \param includeHiddenCategories flag to return content from hidden categories as well as visible
///
/// \param location the location, or nil to use the last tracked location if available
///
/// \param completion called when complete with results and flags indicating exact and partial matches are present
///
- (void)suggestedEmojisFor:(NSString * _Nonnull)text includePartialMatches:(BOOL)includePartialMatches includeHiddenCategories:(BOOL)includeHiddenCategories at:(CLLocation * _Nullable)location :(void (^ _Nonnull)(NSArray<KarmiesEmoji *> * _Nonnull, NSArray<NSString *> * _Nonnull, BOOL, BOOL))completion;
- (void)replacementEmojisFor:(NSString * _Nonnull)text includeHiddenCategories:(BOOL)includeHiddenCategories at:(CLLocation * _Nullable)location :(void (^ _Nonnull)(NSDictionary<NSString *, KarmiesEmoji *> * _Nonnull))completion;
- (BOOL)checkIfReadWithEmoji:(KarmiesEmoji * _Nonnull)emoji SWIFT_WARN_UNUSED_RESULT;
- (void)markAsReadWithEmoji:(KarmiesEmoji * _Nonnull)emoji;
@end

@class UITextField;
@class UISlider;
@class UISwitch;

SWIFT_CLASS("_TtC10KarmiesSDK26KarmiesDebugViewController")
@interface KarmiesDebugViewController : UITableViewController
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified keyboardTextField;
@property (nonatomic, weak) IBOutlet UISlider * _Null_unspecified locationSlider;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified locationLabel;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified regionAlertsSwitch;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified debugLoggingSwitch;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified appVersionLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified karmiesVersionLabel;
- (void)viewDidLoad;
- (IBAction)cancelAction:(id _Nonnull)sender;
- (IBAction)saveAction:(id _Nonnull)sender;
- (IBAction)locationAction:(id _Nonnull)sender;
- (IBAction)resetTooltipsAction:(id _Nonnull)sender;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesEmoji")
@interface KarmiesEmoji : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified keywords;
@property (nonatomic, copy) NSString * _Nullable headline;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable largeImage;
@property (nonatomic, copy) NSString * _Nullable unicode;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable emoticon;
@property (nonatomic, copy) NSString * _Nullable author;
@property (nonatomic, copy) NSArray<KarmiesApp *> * _Nullable apps;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, strong) UIImage * _Nullable localLargeImage;
@property (nonatomic, copy) NSString * _Nullable localAction;
@property (nonatomic, copy) NSString * _Nullable localInfo;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic) BOOL remote;
@property (nonatomic, readonly) BOOL isRead;
@property (nonatomic, readonly, copy) NSString * _Nonnull adBannerId;
@property (nonatomic, readonly, copy) NSString * _Nonnull adInterstitialId;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull largeImageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull linkURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull infoURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name desc:(NSString * _Nonnull)desc keywords:(NSArray<NSString *> * _Nonnull)keywords image:(NSString * _Nullable)image largeImage:(NSString * _Nullable)largeImage localImage:(UIImage * _Nullable)localImage localLargeImage:(UIImage * _Nullable)localLargeImage localAction:(NSString * _Nullable)localAction apps:(NSArray<KarmiesApp *> * _Nullable)apps payload:(NSString * _Nullable)payload remote:(BOOL)remote;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Mark an emoji as read.
- (void)markAsRead;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEmojis")
@interface KarmiesEmojis : NSObject <NSCoding>
@property (nonatomic, copy) NSDictionary<NSString *, KarmiesEmoji *> * _Null_unspecified entities;
- (nonnull instancetype)initWithEntities:(NSDictionary<NSString *, KarmiesEmoji *> * _Nonnull)entities OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class KarmiesLocation;
@class KarmiesLink;

SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEntity")
@interface KarmiesEntity : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, strong) KarmiesLocation * _Nullable locationValue;
@property (nonatomic, strong) KarmiesLink * _Nullable linkValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesGeoplacement")
@interface KarmiesGeoplacement : KarmiesCategory
@property (nonatomic, copy) NSString * _Null_unspecified emoji;
@property (nonatomic, copy) NSArray<KarmiesArea *> * _Null_unspecified areas;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, KarmiesImageSize) {
  KarmiesImageSizeNormal = 0,
  KarmiesImageSizeLarge = 1,
};


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesImages")
@interface KarmiesImages : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesImages * _Nonnull shared;)
+ (KarmiesImages * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns an image for a category.
/// \param category the category
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageFor:(KarmiesCategory * _Nonnull)category reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
/// Returns an image for an emoji name.
/// \param name the emoji name.
///
/// \param size the size to return (normal or large), defaults to normal.
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageWithNamed:(NSString * _Nonnull)name size:(enum KarmiesImageSize)size reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
/// Returns an image for an emoji.
/// \param emoji the emoji
///
/// \param size the size to return (normal or large), defaults to normal
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageFor:(KarmiesEmoji * _Nonnull)emoji size:(enum KarmiesImageSize)size reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
@end

@class UICollectionViewFlowLayout;
@class UICollectionViewCell;

SWIFT_CLASS("_TtC10KarmiesSDK47KarmiesKeyboardCategoryCollectionViewController")
@interface KarmiesKeyboardCategoryCollectionViewController : UICollectionViewController <UICollectionViewDelegateFlowLayout>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull reuseIdentifier;)
+ (NSString * _Nonnull)reuseIdentifier SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) NSInteger selectedCategoryIndex;
@property (nonatomic, copy) void (^ _Nullable categoryWasChangedHandler)(NSInteger);
@property (nonatomic, readonly, strong) UICollectionViewFlowLayout * _Nonnull layout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setupCollectionView;
- (void)dataReadyWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (void)dataUpdatedWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK50KarmiesKeyboardCategoryContainerPageViewController")
@interface KarmiesKeyboardCategoryContainerPageViewController : UIPageViewController <UIPageViewControllerDataSource, UIPageViewControllerDelegate>
@property (nonatomic, copy) void (^ _Nullable categoryWasChangedHandler)(NSInteger);
@property (nonatomic, copy) void (^ _Nullable emojiWasDisplayedHandler)(NSString * _Nonnull, NSString * _Nonnull, NSInteger);
@property (nonatomic, copy) void (^ _Nullable emojiWasTappedHandler)(NSString * _Nonnull, NSString * _Nonnull, NSInteger, NSInteger, NSString * _Nullable);
@property (nonatomic, strong) UIView * _Nullable keyboardView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)dataReadyWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (void)dataUpdatedWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (void)setCategoryWith:(NSInteger)index reload:(BOOL)reload;
- (UIViewController * _Nullable)viewControllerFor:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
- (nonnull instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<NSString *, id> * _Nullable)options SWIFT_UNAVAILABLE;
@end

@class UIImageView;

SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesKeyboardCollectionViewCell")
@interface KarmiesKeyboardCollectionViewCell : UICollectionViewCell
@property (nonatomic, strong) UIImageView * _Null_unspecified imageView;
@property (nonatomic, strong) UIView * _Null_unspecified indicatorView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

SWIFT_CLASS("_TtC10KarmiesSDK44KarmiesKeyboardEmojiCollectionViewController")
@interface KarmiesKeyboardEmojiCollectionViewController : UICollectionViewController <UICollectionViewDelegateFlowLayout>
@property (nonatomic, readonly, strong) KarmiesCategory * _Nullable category;
@property (nonatomic) NSInteger index;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull emojis;
@property (nonatomic, readonly, strong) KarmiesOptions * _Nonnull options;
@property (nonatomic, copy) void (^ _Nullable emojiWasDisplayedHandler)(NSString * _Nonnull, NSString * _Nonnull, NSInteger);
@property (nonatomic, copy) void (^ _Nullable emojiWasTappedHandler)(NSString * _Nonnull, NSString * _Nonnull, NSInteger, NSInteger, NSString * _Nullable);
@property (nonatomic, strong) UIView * _Nullable keyboardView;
- (nonnull instancetype)initWithCategory:(KarmiesCategory * _Nonnull)category index:(NSInteger)index OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)update;
- (void)openDebug;
- (void)refresh;
- (void)finishRefresh;
- (void)prepareToTransition;
- (void)closeMenus;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK27KarmiesKeyboardToggleButton")
@interface KarmiesKeyboardToggleButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesKeyboardView")
@interface KarmiesKeyboardView : UIView
@property (nonatomic, readonly, strong) KarmiesKeyboardCategoryCollectionViewController * _Nonnull categoryCollectionViewController;
@property (nonatomic, readonly, strong) KarmiesKeyboardCategoryContainerPageViewController * _Nonnull categoryContainerPageViewController;
@property (nonatomic, readonly, strong) UIButton * _Nonnull backspaceButton;
@property (nonatomic, readonly, strong) UIView * _Nonnull separatorView;
@property (nonatomic) BOOL reachabilityViewIsHidden;
@property (nonatomic, copy) void (^ _Nullable emojiWasTappedHandler)(NSString * _Nonnull, NSString * _Nonnull, NSInteger, NSInteger, NSString * _Nullable);
@property (nonatomic, readonly) CGFloat categoryHeight;
@property (nonatomic, readonly) CGFloat separatorHeight;
@property (nonatomic) CGFloat backspaceWidth;
- (nonnull instancetype)initWithHeight:(CGFloat)height OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)dataReadyWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (void)dataUpdatedWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories;
- (void)setupSubviews;
- (void)setupConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View controller that wraps the Karmies keyboard view for full screen use, such as in a Messages app extension.
SWIFT_CLASS("_TtC10KarmiesSDK29KarmiesKeyboardViewController")
@interface KarmiesKeyboardViewController : UIViewController
@property (nonatomic, strong) IBOutlet KarmiesKeyboardView * _Null_unspecified keyboardView;
- (void)viewDidLoad;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)karmiesDataReady;
- (void)karmiesDataUpdated;
- (void)prepareToTransition;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesLink")
@interface KarmiesLink : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesLocation")
@interface KarmiesLocation : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull clazz;)
+ (NSString * _Nonnull)clazz SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable street;
@property (nonatomic, copy) NSString * _Nullable locality;
@property (nonatomic, copy) NSString * _Nullable phoneNumberDisplay;
@property (nonatomic, copy) NSString * _Nullable phoneNumberValue;
@property (nonatomic, copy) NSString * _Nullable website;
@property (nonatomic, copy) NSString * _Nullable priceLevel;
@property (nonatomic, copy) NSString * _Nullable rating;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlacemark:(CLPlacemark * _Nonnull)placemark;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class CLLocationManager;
@class CLRegion;

SWIFT_CLASS("_TtC10KarmiesSDK22KarmiesLocationManager")
@interface KarmiesLocationManager : NSObject <CLLocationManagerDelegate>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesLocationManager * _Nonnull shared;)
+ (KarmiesLocationManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) CLLocationManager * _Nonnull locationManager;
@property (nonatomic, readonly, strong) CLLocation * _Nullable currentLocation;
@property (nonatomic, readonly, strong) CLPlacemark * _Nullable currentPlacemark;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)begin;
- (void)updateLocationWith:(void (^ _Nullable)(CLLocation * _Nullable))completionHandler;
- (void)updateRegions;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesLogger")
@interface KarmiesLogger : NSObject
+ (void)logTimeForTaskWithTask:(NSString * _Nonnull)task startTime:(CFAbsoluteTime)startTime file:(NSString * _Nonnull)file function:(NSString * _Nonnull)function line:(NSInteger)line;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;
@class UIFont;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesMessages")
@interface KarmiesMessages : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesMessages * _Nonnull shared;)
+ (KarmiesMessages * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Returns serialized message for the attributed text.
/// \param attributedText Attributed text containing emojis.
///
///
/// returns:
/// Plain text string with any emojis serializd into links.
- (NSString * _Nonnull)serializeMessageFrom:(NSAttributedString * _Nonnull)attributedText SWIFT_WARN_UNUSED_RESULT;
/// Deserializes a message with any embedded Karmies into an attributed string for display.
/// \param message the serialized message
///
/// \param outgoing is the message is outgoing/ingoing
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param completion called with an attributed string with any Karmies embedded once ready
///
- (void)deserializeMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing sync:(BOOL)sync completion:(void (^ _Nonnull)(NSAttributedString * _Nonnull))completion;
/// Checks if the message contains serialized emojis.
/// \param message The message.
///
///
/// returns:
/// True if it contains serialized emojis.
- (BOOL)isSerializedMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns size of message after deserialization with the according parameters.
/// \param message The serialized message.
///
/// \param outgoing Is the message is outgoing/ingoing.
///
/// \param font The font for deserialized message.
///
/// \param maxWidth Maximum width of deserialized message.
///
///
/// returns:
/// The size of deserialized message.
- (CGSize)measureSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Draws the message with according parameters inside the frame.
/// \param message The serialized message.
///
/// \param outgoing Is the message outgoing.
///
/// \param frame The frame where the message will be drawn.
///
/// \param font The font for the message.
///
- (void)drawSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing insideFrame:(CGRect)frame withFont:(UIFont * _Nonnull)font;
/// Returns the link from the message at the point if it’s presented.
/// \param point The point inside the message frame.
///
/// \param frame The message frame.
///
/// \param message The serialized message.
///
/// \param outgoing Is the message is outgoing/ingoing.
///
/// \param font The font for the message.
///
///
/// returns:
/// The link if it’s presented or nil.
- (NSString * _Nullable)linkAt:(CGPoint)point inside:(CGRect)frame with:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font SWIFT_WARN_UNUSED_RESULT;
/// Returns the link from the specified point in a text view.
/// \param point the point inside the message frame
///
/// \param textView the text view
///
/// \param outgoing true if the message is outgoing
///
///
/// returns:
/// the link if found else nil
- (NSString * _Nullable)linkAt:(CGPoint)point in:(UITextView * _Nonnull)textView outgoing:(BOOL)outgoing SWIFT_WARN_UNUSED_RESULT;
@end

@class MSConversation;
@class MSMessage;

/// Main app controller class for a Karmies powered Messages app. The message app should extend this to provide configuration and customization if desired.
SWIFT_CLASS("_TtC10KarmiesSDK32KarmiesMessagesAppViewController")
@interface KarmiesMessagesAppViewController : MSMessagesAppViewController
/// Determine the Karmies client ID to use.
///
/// returns:
/// The client ID.
@property (nonatomic, readonly, copy) NSString * _Nonnull clientID;
/// Determine if location should be monitored for displaying geolocated stickers.
///
/// returns:
/// true to request and monitor location when in use
@property (nonatomic, readonly) BOOL monitorLocation;
/// Determine if location should also be monitored when not in use for displaying geolocated stickers.
///
/// returns:
/// true to request and monitor location always
@property (nonatomic, readonly) BOOL alwaysLocation;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedName;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedCategory;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedFeature;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLoaded;)
+ (BOOL)isLoaded SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)willBecomeActiveWithConversation:(MSConversation * _Nonnull)conversation;
- (void)didResignActiveWithConversation:(MSConversation * _Nonnull)conversation;
- (void)didReceiveMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didStartSendingMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didCancelSendingMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle;
- (void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle;
- (void)willSelectMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didSelectMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
/// Update and display new content.
/// \param reload Flag to reload from the network even if data is already cached.
///
/// \param ready Called when initial data is received and ready, after which content is available for display in the UI.
///
/// \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.
///
- (void)updateWithReload:(BOOL)reload ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/// Present a child view controller. This will automatically present the appropriate sticker or feature view by default.
/// \param conversation The conversation.
///
/// \param presentationStyle The requested presentation style.
///
///
/// returns:
/// The new view controller.
- (UIViewController * _Nullable)presentViewControllerFor:(MSConversation * _Nonnull)conversation with:(MSMessagesAppPresentationStyle)presentationStyle;
/// Show a child view controller in the current presentation style.
/// \param viewController The view controller.
///
/// \param presentationStyle The presentation style.
///
- (void)show:(UIViewController * _Nonnull)viewController with:(MSMessagesAppPresentationStyle)presentationStyle;
- (UIViewController * _Nullable)karmiesPresentFeatureController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)karmiesDismissFeatureController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesModalFeatureViewController")
@interface KarmiesModalFeatureViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified wrapperView;
@property (nonatomic, strong) UIViewController * _Null_unspecified wrappedViewController;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesOptions")
@interface KarmiesOptions : NSObject <NSCoding>
@property (nonatomic) BOOL realtimeAnalytics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesPayload")
@interface KarmiesPayload : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, copy) NSString * _Nullable emoji;
@property (nonatomic, copy) NSArray<KarmiesEntity *> * _Nullable entities;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithClazz:(NSString * _Nonnull)clazz emoji:(NSString * _Nonnull)emoji entities:(NSArray<KarmiesEntity *> * _Nonnull)entities;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
@property (nonatomic, readonly, copy) NSString * _Nonnull embedded;
+ (KarmiesPayload * _Nullable)payloadForURL:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)emptyURLWithEmoji:(NSString * _Nonnull)emoji SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)ensurePublisherForURL:(NSURL * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesReachability")
@interface KarmiesReachability : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesReachability * _Nonnull shared;)
+ (KarmiesReachability * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isReachable;
@property (nonatomic, readonly) BOOL isReachableOnWWAN;
@property (nonatomic, readonly) BOOL isReachableOnEthernetOrWiFi;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSTextAttachment;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesRenderer")
@interface KarmiesRenderer : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesRenderer * _Nonnull shared;)
+ (KarmiesRenderer * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (NSTextAttachment * _Nonnull)imageTextAttachmentWithImage:(UIImage * _Nonnull)image lineHeight:(CGFloat)lineHeight SWIFT_WARN_UNUSED_RESULT;
/// Resize an image.
/// \param image the image
///
/// \param size the new size
///
///
/// returns:
/// the resized image
- (UIImage * _Nonnull)resizeWithImage:(UIImage * _Nonnull)image size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesResources")
@interface KarmiesResources : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesResources * _Nonnull shared;)
+ (KarmiesResources * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;

SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesRoundView")
@interface KarmiesRoundView : UIView
- (BOOL)pointInside:(CGPoint)point with:(UIEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KarmiesTooltipType) {
  KarmiesTooltipTypeToggle = 0,
  KarmiesTooltipTypeInput = 1,
  KarmiesTooltipTypeMessage = 2,
};


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesTooltips")
@interface KarmiesTooltips : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) KarmiesTooltips * _Nonnull shared;)
+ (KarmiesTooltips * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Show a Karmies tooltip for the view.
/// \param view the view
///
/// \param type the tooltip type
///
/// \param offset offset from view edge for tooltip arrow, centered if less than zero, defaults to centered
///
/// \param force flag to show even if it has been shown once before, defaults to false
///
- (void)showTooltipFor:(UIView * _Nonnull)view type:(enum KarmiesTooltipType)type offset:(CGFloat)offset force:(BOOL)force;
- (void)hideTooltip;
- (void)resetTooltips;
- (void)easyTipViewDidDismiss:(EasyTipView * _Nonnull)tipView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesUnicodes")
@interface KarmiesUnicodes : NSObject <NSCoding>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Null_unspecified entities;
- (nonnull instancetype)initWithEntities:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)entities OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesUtils")
@interface KarmiesUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSCharacterSet * _Nonnull autoSuggestTrimSet;)
+ (NSCharacterSet * _Nonnull)autoSuggestTrimSet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSCharacterSet * _Nonnull autoReplaceTrimSet;)
+ (NSCharacterSet * _Nonnull)autoReplaceTrimSet SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isBackground;)
+ (BOOL)isBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isInactive;)
+ (BOOL)isInactive SWIFT_WARN_UNUSED_RESULT;
/// Creates UIFont object for the CTFont object using name and size.
+ (UIFont * _Nonnull)fontFromCTFont:(CTFontRef _Nonnull)font SWIFT_WARN_UNUSED_RESULT;
/// Modifies UITextView object’s text insets and placeholder view to make free space on the left to place button there.
+ (void)placeButton:(UIButton * _Nonnull)button onLeftOf:(UITextView * _Nonnull)textView withPlaceholder:(UIView * _Nullable)placeholderView in:(UIView * _Nullable)superview;
/// Determine current suggest text for a text view.
/// \param textView the text view
///
///
/// returns:
/// the suggest text
+ (NSString * _Nonnull)suggestTextFor:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Determine current replace text for a text view.
/// \param textView the text view
///
///
/// returns:
/// the replace text
+ (NSString * _Nonnull)replaceTextFor:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<KarmiesCategory *> * _Nonnull)joinWithCategories:(NSArray<KarmiesCategory *> * _Nonnull)categories geoplacements:(NSArray<KarmiesGeoplacement *> * _Nonnull)geoplacements location:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)joinWithEmojis:(NSArray<NSString *> * _Nonnull)emojis geoplacements:(NSArray<KarmiesGeoplacement *> * _Nonnull)geoplacements location:(CLLocation * _Nonnull)location SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringForUnicode:(NSString * _Nonnull)unicode SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)unicodeForString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (void)showDebugAlertWithMessage:(NSString * _Nonnull)message foreground:(BOOL)foreground background:(BOOL)background;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigation;
@class UIWebView;

SWIFT_CLASS("_TtC10KarmiesSDK24KarmiesWebViewController")
@interface KarmiesWebViewController : UIViewController <UIWebViewDelegate, WKNavigationDelegate>
@property (nonatomic, strong) UIViewController * _Nullable previousRootViewController;
@property (nonatomic, readonly, strong) UIView * _Null_unspecified webView;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (void)evaluateJavaScript:(NSString * _Nonnull)script;
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation SWIFT_AVAILABILITY(ios,introduced=8.0);
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
- (void)publishShellTokenWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
- (void)close;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKNavigationAction;

SWIFT_CLASS("_TtC10KarmiesSDK31KarmiesWebFeatureViewController")
@interface KarmiesWebFeatureViewController : KarmiesWebViewController
@property (nonatomic, strong) KarmiesEmoji * _Nonnull emoji;
@property (nonatomic, copy) NSString * _Nullable categoryName;
@property (nonatomic, copy) void (^ _Nullable completionHandler)(NSString * _Nullable);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)publishShellTokenWithData:(NSDictionary<NSString *, id> * _Nonnull)data;
- (void)close;
- (void)submitAction:(id _Nonnull)sender;
- (void)openURL:(NSURL * _Nonnull)url;
- (void)openWithUrl:(NSURL * _Nonnull)url;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler SWIFT_AVAILABILITY(ios,introduced=8.0);
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWithRequest:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset SWIFT_UNAVAILABLE;
@end

@class UIImagePickerController;

@interface KarmiesWebFeatureViewController (SWIFT_EXTENSION(KarmiesSDK)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
@end



@interface NSMutableData (SWIFT_EXTENSION(KarmiesSDK))
- (void)appendBytes:(NSArray<NSNumber *> * _Nonnull)arrayOfBytes;
@end


@interface NSNumber (SWIFT_EXTENSION(KarmiesSDK))
@end

@class NSURLSessionStreamTask;
@class NSOutputStream;

SWIFT_CLASS("_TtC10KarmiesSDK15SessionDelegate")
@interface SessionDelegate : NSObject
@property (nonatomic, copy) void (^ _Nullable sessionDidBecomeInvalidWithError)(NSURLSession * _Nonnull, NSError * _Nullable);
@property (nonatomic, copy) void (^ _Nullable sessionDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
@property (nonatomic, copy) void (^ _Nullable sessionDidFinishEventsForBackgroundURLSession)(NSURLSession * _Nonnull);
@property (nonatomic, copy) NSURLRequest * _Nullable (^ _Nullable taskWillPerformHTTPRedirection)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable taskWillPerformHTTPRedirectionWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSHTTPURLResponse * _Nonnull, NSURLRequest * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(NSURLRequest * _Nullable));
@property (nonatomic, copy) void (^ _Nullable taskDidReceiveChallengeWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSURLAuthenticationChallenge * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable));
@property (nonatomic, copy) NSInputStream * _Nullable (^ _Nullable taskNeedNewBodyStream)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable taskNeedNewBodyStreamWithCompletion)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(NSInputStream * _Nullable));
@property (nonatomic, copy) void (^ _Nullable taskDidSendBodyData)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, int64_t, int64_t, int64_t);
@property (nonatomic, copy) void (^ _Nullable taskDidComplete)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, NSError * _Nullable);
@property (nonatomic, copy) enum NSURLSessionResponseDisposition (^ _Nullable dataTaskDidReceiveResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLResponse * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(enum NSURLSessionResponseDisposition));
@property (nonatomic, copy) void (^ _Nullable dataTaskDidBecomeDownloadTask)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSURLSessionDownloadTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable dataTaskDidReceiveData)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSData * _Nonnull);
@property (nonatomic, copy) NSCachedURLResponse * _Nullable (^ _Nullable dataTaskWillCacheResponse)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable dataTaskWillCacheResponseWithCompletion)(NSURLSession * _Nonnull, NSURLSessionDataTask * _Nonnull, NSCachedURLResponse * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(NSCachedURLResponse * _Nullable));
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidFinishDownloadingToURL)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, NSURL * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidWriteData)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t, int64_t);
@property (nonatomic, copy) void (^ _Nullable downloadTaskDidResumeAtOffset)(NSURLSession * _Nonnull, NSURLSessionDownloadTask * _Nonnull, int64_t, int64_t);
@property (nonatomic, copy) void (^ _Nullable streamTaskReadClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable streamTaskWriteClosed)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable streamTaskBetterRouteDiscovered)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull);
@property (nonatomic, copy) void (^ _Nullable streamTaskDidBecomeInputAndOutputStreams)(NSURLSession * _Nonnull, NSURLSessionStreamTask * _Nonnull, NSInputStream * _Nonnull, NSOutputStream * _Nonnull);
@property (nonatomic) id _Nullable _streamTaskReadClosed;
@property (nonatomic) id _Nullable _streamTaskWriteClosed;
@property (nonatomic) id _Nullable _streamTaskBetterRouteDiscovered;
@property (nonatomic) id _Nullable _streamTaskDidBecomeInputStream;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)respondsToSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionStreamDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end

@class NSURLSessionTaskMetrics;

@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end



@interface UIApplication (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIBarItem (SWIFT_EXTENSION(KarmiesSDK))
@property (nonatomic, readonly, strong) UIView * _Nullable karmies_view;
@end


@interface UIButton (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIColor (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
+ (UIImage * _Nullable)karmies_imageWithNamed:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIImage (SWIFT_EXTENSION(KarmiesSDK))
- (UIImage * _Nonnull)kf_normalized SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.normalized` instead.", "kf.normalized");
- (UIImage * _Nonnull)kf_imageWithRoundRadius:(CGFloat)radius fit:(CGSize)size scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.image(withRoundRadius:fit:scale:)` instead.", "kf.image");
- (UIImage * _Nonnull)kf_resizeTo:(CGSize)size SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.resize(to:)` instead.", "kf.resize");
- (UIImage * _Nonnull)kf_blurredWithRadius:(CGFloat)radius SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.blurred(withRadius:)` instead.", "kf.blurred");
- (UIImage * _Nonnull)kf_overlayingWith:(UIColor * _Nonnull)color fraction:(CGFloat)fraction SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.overlaying(with:fraction:)` instead.", "kf.overlaying");
- (UIImage * _Nonnull)kf_tintedWith:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.tinted(with:)` instead.", "kf.tinted");
- (UIImage * _Nonnull)kf_adjustedWithBrightness:(CGFloat)brightness contrast:(CGFloat)contrast saturation:(CGFloat)saturation inputEV:(CGFloat)inputEV SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Extensions directly on Image are deprecated. Use `kf.adjusted` instead.", "kf.adjusted");
@end


@interface UIImageView (SWIFT_EXTENSION(KarmiesSDK))
- (BOOL)shouldPreloadAllGIF SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImageView (SWIFT_EXTENSION(KarmiesSDK))
@end


@interface UIImageView (SWIFT_EXTENSION(KarmiesSDK))
- (void)kf_cancelDownloadTask SWIFT_DEPRECATED_MSG("Extensions directly on image views are deprecated. Use `imageView.kf.cancelDownloadTask` instead.", "kf.cancelDownloadTask");
@property (nonatomic, readonly, copy) NSURL * _Nullable kf_webURL;
@end


@interface UIView (SWIFT_EXTENSION(KarmiesSDK))
- (BOOL)karmies_hasSuperview:(UIView * _Nonnull)superview SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSURLSession (SWIFT_EXTENSION(KarmiesSDK))
@end

@class NSURLSessionUploadTask;

SWIFT_CLASS("_TtC10KarmiesSDK18UploadTaskDelegate")
@interface UploadTaskDelegate : DataTaskDelegate
@property (nonatomic, readonly, strong) NSURLSessionUploadTask * _Nonnull uploadTask;
@property (nonatomic, strong) NSProgress * _Nonnull uploadProgress;
- (nonnull instancetype)initWithTask:(NSURLSessionTask * _Nullable)task OBJC_DESIGNATED_INITIALIZER;
- (void)reset;
@property (nonatomic, copy) void (^ _Nullable taskDidSendBodyData)(NSURLSession * _Nonnull, NSURLSessionTask * _Nonnull, int64_t, int64_t, int64_t);
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
@end

#pragma clang diagnostic pop
