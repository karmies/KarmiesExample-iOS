// Generated by Apple Swift version 4.0 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
@import CoreGraphics;
@import CoreLocation;
@import Messages;
@import CoreText;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("KarmiesSDK")
@class NSCoder;

SWIFT_CLASS("_TtC10KarmiesSDK11CacheObject")
@interface CacheObject : NSObject <NSCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSInputStream;

SWIFT_CLASS("_TtC10KarmiesSDK12TaskDelegate")
@interface TaskDelegate : NSObject
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSURLSessionDownloadTask;
@class NSCachedURLResponse;

SWIFT_CLASS("_TtC10KarmiesSDK16DataTaskDelegate")
@interface DataTaskDelegate : TaskDelegate <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10KarmiesSDK20DownloadTaskDelegate")
@interface DownloadTaskDelegate : TaskDelegate <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

@class UIColor;

SWIFT_CLASS("_TtC10KarmiesSDK11EasyTipView")
@interface EasyTipView : UIView
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)handleRotation;
- (void)handleTap;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface EasyTipView (SWIFT_EXTENSION(KarmiesSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC10KarmiesSDK29ImageDownloaderSessionHandler")
@interface ImageDownloaderSessionHandler : NSObject <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class KarmiesData;
@class KarmiesImages;
@class KarmiesRenderer;
@class KarmiesMessages;
@class KarmiesTooltips;
@class KarmiesAnalytics;
@protocol KarmiesFeaturePresentationDelegate;
@class CLLocation;
@class CLPlacemark;
@class UIApplication;
@protocol KarmiesUpdateHandler;
@class UIViewController;
@class UIImage;

/// Main Karmies configuration class.
SWIFT_CLASS("_TtC10KarmiesSDK7Karmies")
@interface Karmies : NSObject
/// Karmies instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Karmies * _Nonnull shared;)
+ (Karmies * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Karmies data including all category and emoji content metadata.
@property (nonatomic, readonly, strong) KarmiesData * _Nonnull data;
/// Karmies image loading for all content.
@property (nonatomic, readonly, strong) KarmiesImages * _Nonnull images;
/// Karmies image and attributed text rendering.
@property (nonatomic, readonly, strong) KarmiesRenderer * _Nonnull renderer;
/// Karmies message parsing.
@property (nonatomic, readonly, strong) KarmiesMessages * _Nonnull messages;
/// Karmies tooltips.
@property (nonatomic, readonly, strong) KarmiesTooltips * _Nonnull tooltips;
/// Karmies analytics.
@property (nonatomic, readonly, strong) KarmiesAnalytics * _Nonnull analytics;
/// Flag that Karmies data is ready for use.
@property (nonatomic, readonly) BOOL isReady;
/// Flag that Karmies data has completed all processing and precaching.
@property (nonatomic, readonly) BOOL isComplete;
/// Assigned Karmies client identifier.
@property (nonatomic, copy) NSString * _Null_unspecified clientID;
/// Delegate to use for feature presentation in place of the built-in modal presentation.
@property (nonatomic, strong) id <KarmiesFeaturePresentationDelegate> _Nullable featurePresentationDelegate;
/// Flag to automatically monitor location for Karmies features that require it. The containing app must have the “when in use” location usage description configured.
@property (nonatomic) BOOL monitorLocation;
/// Flag to always monitor location including infrequent background updates for features that are enhanced by it. The containing app must also have “always” location usage description configured but does not need to enable any specific background modes. If the app does have any background modes they may be used for updates, otherwise it will run in the backround only briefly such as when the user has recently left the app before it suspends or when a geofenced region is entered or exited.
@property (nonatomic) BOOL alwaysLocation;
/// Flag to show region enter and exit alerts for debugging.
@property (nonatomic) BOOL showRegionAlerts;
/// Flag to enable debug logging.
@property (nonatomic) BOOL debugLogging;
/// Interval to use for periodic location monitoring.
@property (nonatomic) NSTimeInterval locationCheckInterval;
/// Maximum number of geofence regions to monitor, defaults to the iOS app limit is 20.
@property (nonatomic) NSInteger regionLimit;
/// <ul>
///   <li>
///     Returns the current location used by Karmies for display purposes which may be up to 20 seconds stale.
///   </li>
/// </ul>
///
/// returns:
/// the location
@property (nonatomic, readonly, strong) CLLocation * _Nullable currentLocation;
/// <ul>
///   <li>
///     Returns the current placemark used by Karmies for display purposes which may be up to 20 seconds stale.
///   </li>
/// </ul>
///
/// returns:
/// the location
@property (nonatomic, readonly, strong) CLPlacemark * _Nullable currentPlacemark;
/// Flag to allow secret access to a debug controller by developers (defaults to true).
@property (nonatomic) BOOL allowDebugController;
/// Configure Karmies for use in an application and load initial data from the cloud if necessary. This should be called as early as possible after application launch to ensure correct behavior.
/// \param application the running UIApplication instance if deployed in a full app, or nil if an app extension
///
/// \param clientID the Karmies client ID for this application
///
/// \param autoUpdate flag to automatically update data periodically when the network is reachable (otherwise update() must be called explicitly), defaults to true
///
/// \param monitorLocation flag to automatically monitor location for Karmies features that require it. The containing app must have the “when in use” location usage description configured
///
/// \param alwaysLocation flag to always monitor location including infrequent background updates for features that are enhanced by it. The containing app must also have “always” location usage description configured but does not need to enable any specific background modes. If the app does have any background modes they may be used for updates, otherwise it will run in the backround only briefly such as when the user has recently left the app before it suspends or when a geofenced region is entered or exited
///
/// \param ready called when initial data is received and ready, after which categories are available for display in the UI
///
/// \param complete called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin
///
- (void)configureWithApplication:(UIApplication * _Nullable)application clientID:(NSString * _Nonnull)clientID autoUpdate:(BOOL)autoUpdate monitorLocation:(BOOL)monitorLocation alwaysLocation:(BOOL)alwaysLocation ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/// Request update of Karmies data, such as after application has been resumed, a specified time period has elapsed, or the user has initiated a refresh.
/// \param reload Flag to reload from the network even if data is already cached.
///
/// \param ready Called when initial data is received and ready, after which categories are available for display in the UI.
///
/// \param complete Called when all prefetching and caching of images or other data is complete, after which any background operations that expect fully populated data should begin.
///
- (void)updateWithReload:(BOOL)reload ready:(void (^ _Nullable)(void))ready complete:(void (^ _Nullable)(void))complete;
/// Add an update handler to be notified when data is ready or changes incrementally after initial load.
/// \param updatehandler The update handler.
///
- (void)addWithUpdateHandler:(id <KarmiesUpdateHandler> _Nonnull)updateHandler;
/// Remove all current update handlers.
- (void)removeAllUpdateHandlers;
/// Insert an emoji in the current keyboard input view.
/// \param name The emoji name.
///
/// \param categoryName The category name if added from a category.
///
/// \param index The displayed index for the emoji.
///
/// \param input The input if added based on user input.
///
/// \param keyword The matching keyword if added based on a keyword.
///
- (void)insertEmojiWithNamed:(NSString * _Nonnull)name in:(NSString * _Nullable)categoryName index:(NSInteger)index input:(NSString * _Nullable)input keyword:(NSString * _Nullable)keyword;
/// Show the specified emoji, opening the keyboard, changing categories, and scrolling if necessary.
/// \param name The emoji name.
///
/// \param categoryName The category name.
///
- (void)showEmojiWithNamed:(NSString * _Nullable)name in:(NSString * _Nullable)categoryName;
/// Present view feature view for the emoji with specified URL.
/// \param url The url for the emoji.
///
- (UIViewController * _Nullable)presentViewFeatureControllerWith:(NSURL * _Nonnull)url;
- (void)dismissFeatureController;
- (UIView * _Nonnull)navigationTitleViewWithImage:(UIImage * _Nullable)image SWIFT_WARN_UNUSED_RESULT;
/// Force Karmies to start monitoring location. This does not normally need to be called unless it was stopped externally and needs to be resumed.
- (void)startMonitoringLocation;
/// Force Karmies to stop monitoring location. This does not normally need to be called unless there is an external need to suspend it after starting.
- (void)stopMonitoringLocation;
/// Force a one time update of Karmies location regardless of passive monitoring.
- (void)updateLocation;
/// Handle the application becoming active, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
- (void)didBecomeActive;
/// Handle the application becoming inactive, called automatically via notification if Karmies is running in a normal app, but may need to be triggered externally for an app extension.
- (void)willResignActive;
- (void)willEnterForeground;
/// Show a debug controller with advanced developer configuration.
- (UIViewController * _Nullable)presentDebugController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UILongPressGestureRecognizer;
@class UITapGestureRecognizer;
@class UIButton;

SWIFT_CLASS("_TtC10KarmiesSDK21KarmiesCircleMenuView")
@interface KarmiesCircleMenuView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)gestureChanged:(UILongPressGestureRecognizer * _Nonnull)sender;
- (void)handleTap:(UITapGestureRecognizer * _Nonnull)sender;
- (void)circleButtonTapped:(UIButton * _Nonnull)sender;
@end

@class NSTimer;

SWIFT_CLASS("_TtC10KarmiesSDK27KarmiesActionCircleMenuView")
@interface KarmiesActionCircleMenuView : KarmiesCircleMenuView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)finishGestureWithTimer:(NSTimer * _Nonnull)timer;
- (void)quickTap;
@end


@interface KarmiesActionCircleMenuView (SWIFT_EXTENSION(KarmiesSDK))
- (void)finishOpened;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesAnalytics")
@interface KarmiesAnalytics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)sendKeyboardCloseEvent;
- (void)sendKeyboardOpenEvent;
- (void)sendKeyboardEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendKeyboardEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex categoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendAutosuggestCloseEvent;
- (void)sendAutosuggestOpenEventWithInput:(NSString * _Nonnull)input emojiCount:(NSInteger)emojiCount;
- (void)sendAutosuggestEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutosuggestEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutoreplaceEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendAutoreplaceEmojisInsertEventWithEmojiName:(NSString * _Nonnull)emojiName emojiIndex:(NSInteger)emojiIndex input:(NSString * _Nonnull)input keyword:(NSString * _Nonnull)keyword;
- (void)sendKeyboardCategoriesOpenEventWithCategoryName:(NSString * _Nonnull)categoryName categoryIndex:(NSInteger)categoryIndex;
- (void)sendMessageInputEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendMessageInputEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendSentMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisImpressionEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisClickEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendReceivedMessageEmojisReturnEventWithEmojiName:(NSString * _Nonnull)emojiName emojiPayload:(NSString * _Nullable)emojiPayload;
- (void)sendRegionEmojisEnterEventWithEmojiName:(NSString * _Nonnull)emojiName duration:(double)duration;
- (void)sendRegionEmojisExitEventWithEmojiName:(NSString * _Nonnull)emojiName duration:(double)duration;
- (void)sendRegionCategoriesEnterEventWithCategoryName:(NSString * _Nonnull)categoryName duration:(double)duration;
- (void)sendRegionCategoriesExitEventWithCategoryName:(NSString * _Nonnull)categoryName duration:(double)duration;
- (void)sendMessageImpressionEventsWithMessage:(NSString * _Nonnull)message isSent:(BOOL)isSent;
/// Immediately flush all events that have not automatically been sent at foreground, background, or periodic intervals.
- (void)flushEvents;
@end


SWIFT_CLASS("_TtC10KarmiesSDK10KarmiesApp")
@interface KarmiesApp : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Nullable query;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable icon;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name query:(NSString * _Nullable)query title:(NSString * _Nullable)title icon:(NSString * _Nullable)icon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesArea")
@interface KarmiesArea : NSObject <NSCoding>
@property (nonatomic, readonly) CLLocationCoordinate2D coordinate;
@property (nonatomic, readonly, strong) CLLocation * _Nonnull location;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class KarmiesOptions;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesCategories")
@interface KarmiesCategories : NSObject <NSCoding>
@property (nonatomic, strong) KarmiesOptions * _Null_unspecified options;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UICollectionViewLayout;

SWIFT_CLASS("_TtC10KarmiesSDK31KarmiesCategoriesCollectionView")
@interface KarmiesCategoriesCollectionView : UICollectionView
- (void)reloadData;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class KarmiesGeoplacement;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesCategory")
@interface KarmiesCategory : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified image;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified emojis;
@property (nonatomic, copy) NSArray<KarmiesGeoplacement *> * _Null_unspecified geoplacements;
@property (nonatomic) BOOL hidden;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
/// <ul>
///   <li>
///     Return all possible emojis at any location without sort or filtering, such as for preloading.
///   </li>
/// </ul>
///
/// returns:
/// The list of emojis.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull possibleEmojis;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name image:(NSString * _Nonnull)image desc:(NSString * _Nonnull)desc emojis:(NSArray<NSString *> * _Nonnull)emojis;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     Return emojis at the specified location with appropriate sorting and filtering, such as for keyboard display.
///   </li>
/// </ul>
/// \param location The location, or nil to use last tracked location if available.
///
///
/// returns:
/// The list of emojis.
- (NSArray<NSString *> * _Nonnull)emojisAt:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end



SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesClient")
@interface KarmiesClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull linkURL;)
+ (NSString * _Nonnull)linkURL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// Handler to be notified when Karmies data is ready or incrementally updated.
SWIFT_PROTOCOL("_TtP10KarmiesSDK20KarmiesUpdateHandler_")
@protocol KarmiesUpdateHandler
- (void)karmiesDataReady;
- (void)karmiesDataUpdated;
@end

@class KarmiesKeyboardToggleButton;
@class UITextView;
@class UILabel;
@class NSNotification;
@class NSBundle;

SWIFT_CLASS("_TtC10KarmiesSDK17KarmiesController")
@interface KarmiesController : UIViewController <KarmiesUpdateHandler>
@property (nonatomic, readonly, strong) KarmiesKeyboardToggleButton * _Null_unspecified keyboardToggleButton;
@property (nonatomic, copy) void (^ _Nullable messageWasChangedHandler)(BOOL);
@property (nonatomic, copy) void (^ _Nullable inputWasChangedHandler)(NSString * _Nonnull, NSString * _Nullable);
@property (nonatomic) BOOL toggleEmbeddedKeyboard;
@property (nonatomic) BOOL autoSuggest;
@property (nonatomic) BOOL autoReplace;
@property (nonatomic) BOOL showToggleTooltip;
@property (nonatomic) BOOL showInputTooltip;
/// Returns a newly initalized Karmies controller.
/// \param hostInputTextView host app text view that is used for message input
///
/// \param toggleEmbeddedKeyboard flag to automatically toggle the OS keyboard open/closed opposite the Karmies keyboard
///
/// \param autoSuggest flag to auto suggest emojis and display them above the input field while typing
///
/// \param autoReplace flag to auto replace unicode emojis with Karmies emojis in the input field while typing
///
/// \param showToggleTooltip flag to show a one-time tooltip for the Karmies toggle button
///
/// \param showInputTooltip flag to show a one-time tooltip for Karmies emojis in the text input
///
///
/// returns:
/// a newly initialized KarmiesController
- (nonnull instancetype)initWithHostInputTextView:(UITextView * _Nonnull)hostInputTextView toggleEmbeddedKeyboard:(BOOL)toggleEmbeddedKeyboard autoSuggest:(BOOL)autoSuggest autoReplace:(BOOL)autoReplace showToggleTooltip:(BOOL)showToggleTooltip showInputTooltip:(BOOL)showInputTooltip OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)karmiesDataReady;
- (void)karmiesDataUpdated;
/// Registers UITextView object as message view to deserialize message from text property every time it’s changed.
/// \param textView The text view.
///
- (void)registerMessageTextViewWithTextView:(UITextView * _Nonnull)textView;
/// Registers UILabel object as message view to deserialize message from text property every time it’s changed.
/// \param label The label.
///
- (void)registerMessageLabelWithLabel:(UILabel * _Nonnull)label;
/// Unregisters UIView object as message view.
/// \param messageView The message view.
///
- (void)unregisterWithMessageView:(UIView * _Nonnull)messageView;
- (void)inputTextViewTappedWithSender:(UITapGestureRecognizer * _Nonnull)sender;
- (void)keyboardDidShow:(NSNotification * _Nonnull)notification;
- (void)keyboardDidHide:(NSNotification * _Nonnull)notification;
- (void)keyboardToggleButtonTappedWithSender:(NSObject * _Nonnull)sender;
- (void)backspaceButtonTappedWithButton:(UIButton * _Nonnull)button;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class KarmiesEmoji;

SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesData")
@interface KarmiesData : NSObject
/// <ul>
///   <li>
///     Return all possible categories at any location without sort or filtering, such as for preloading.
///   </li>
/// </ul>
///
/// returns:
/// the categories
@property (nonatomic, readonly, copy) NSArray<KarmiesCategory *> * _Nonnull possibleCategories;
/// <ul>
///   <li>
///     Return all possible geoplacements at any location without sort or filtering, such as for geofencing.
///   </li>
/// </ul>
///
/// returns:
/// the geoplacements
@property (nonatomic, readonly, copy) NSArray<KarmiesGeoplacement *> * _Nonnull possibleGeoplacements;
/// <ul>
///   <li>
///     Return all possible areas for any geoplacement without sort or filtering, such as for geofencing.
///   </li>
/// </ul>
///
/// returns:
/// the areas
@property (nonatomic, readonly, copy) NSDictionary<KarmiesArea *, KarmiesGeoplacement *> * _Nonnull possibleGeoplacementAreas;
/// <ul>
///   <li>
///     Return the configured keyboard options.
///   </li>
/// </ul>
///
/// returns:
/// the options
@property (nonatomic, readonly, strong) KarmiesOptions * _Nonnull options;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns keyboard categories for the specified location.
/// \param location the location, or nil to use the last tracked location if available
///
/// \param hidden flag to include hidden categories
///
///
/// returns:
/// the categories
- (NSArray<KarmiesCategory *> * _Nonnull)categoriesAt:(CLLocation * _Nullable)location hidden:(BOOL)hidden SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji from a URL token.
/// \param token The URL token containing Karmies data.
///
///
/// returns:
/// The emoji.
- (KarmiesEmoji * _Nullable)emojiFrom:(NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji for the given name and category.
/// \param name The emoji name.
///
///
/// returns:
/// The emoji.
- (KarmiesEmoji * _Nullable)emojiFor:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji name for an index path specifying category and emoji position, optionally at a given location.
/// \param indexPath The index path where section is category and item is emoji.
///
/// \param location The location, or nil to use the last tracked location if available.
///
///
/// returns:
/// The emoji name.
- (NSString * _Nonnull)emojiNameFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
/// Returns an emoji for an index path specifying category and emoji position, optionally at a given location.
/// \param indexPath The index path where section is category and item is emoji.
///
/// \param location The location, or nil to use the last tracked location if available.
///
///
/// returns:
/// The emoji for this position.
- (KarmiesEmoji * _Nullable)emojiFor:(NSIndexPath * _Nonnull)indexPath at:(CLLocation * _Nullable)location SWIFT_WARN_UNUSED_RESULT;
/// Returns suggested emojis for input text.
/// \param text the input text
///
/// \param includePartialMatches flag to return partial matches along with exact matches
///
/// \param includeHiddenCategories flag to return content from hidden categories as well as visible
///
/// \param location the location, or nil to use the last tracked location if available
///
/// \param completion called when complete with results and flags indicating exact and partial matches are present
///
- (void)suggestedEmojisFor:(NSString * _Nonnull)text includePartialMatches:(BOOL)includePartialMatches includeHiddenCategories:(BOOL)includeHiddenCategories at:(CLLocation * _Nullable)location :(void (^ _Nonnull)(NSArray<KarmiesEmoji *> * _Nonnull, NSArray<NSString *> * _Nonnull, BOOL, BOOL))completion;
- (void)replacementEmojisFor:(NSString * _Nonnull)text includeHiddenCategories:(BOOL)includeHiddenCategories at:(CLLocation * _Nullable)location :(void (^ _Nonnull)(NSDictionary<NSString *, KarmiesEmoji *> * _Nonnull))completion;
@end

@class UITextField;
@class UISlider;
@class UISwitch;

SWIFT_CLASS("_TtC10KarmiesSDK26KarmiesDebugViewController")
@interface KarmiesDebugViewController : UITableViewController
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified keyboardTextField;
@property (nonatomic, weak) IBOutlet UISlider * _Null_unspecified locationSlider;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified locationLabel;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified regionAlertsSwitch;
@property (nonatomic, weak) IBOutlet UISwitch * _Null_unspecified debugLoggingSwitch;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified appVersionLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified karmiesVersionLabel;
- (void)viewDidLoad;
- (IBAction)cancelAction:(id _Nonnull)sender;
- (IBAction)saveAction:(id _Nonnull)sender;
- (IBAction)locationAction:(id _Nonnull)sender;
- (IBAction)resetTooltipsAction:(id _Nonnull)sender;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum Status : NSInteger;

SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesEmoji")
@interface KarmiesEmoji : NSObject <NSCoding>
@property (nonatomic, copy) NSString * _Null_unspecified name;
@property (nonatomic, copy) NSString * _Null_unspecified desc;
@property (nonatomic, copy) NSArray<NSString *> * _Null_unspecified keywords;
@property (nonatomic, copy) NSString * _Nullable headline;
@property (nonatomic, copy) NSString * _Nullable image;
@property (nonatomic, copy) NSString * _Nullable largeImage;
@property (nonatomic, copy) NSString * _Nullable unicode;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable emoticon;
@property (nonatomic, copy) NSString * _Nullable author;
@property (nonatomic, copy) NSArray<KarmiesApp *> * _Nullable apps;
@property (nonatomic, strong) UIImage * _Nullable localImage;
@property (nonatomic, strong) UIImage * _Nullable localLargeImage;
@property (nonatomic, copy) NSString * _Nullable localAction;
@property (nonatomic, copy) NSString * _Nullable localInfo;
@property (nonatomic) enum Status status;
@property (nonatomic, copy) NSString * _Nullable payload;
@property (nonatomic) BOOL remote;
@property (nonatomic, readonly) BOOL isRead;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSURL * _Nonnull imageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull largeImageURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull linkURL;
@property (nonatomic, readonly, copy) NSURL * _Nonnull infoURL;
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name desc:(NSString * _Nonnull)desc keywords:(NSArray<NSString *> * _Nonnull)keywords image:(NSString * _Nullable)image largeImage:(NSString * _Nullable)largeImage localImage:(UIImage * _Nullable)localImage localLargeImage:(UIImage * _Nullable)localLargeImage localAction:(NSString * _Nullable)localAction apps:(NSArray<KarmiesApp *> * _Nullable)apps payload:(NSString * _Nullable)payload remote:(BOOL)remote;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Mark an emoji as read.
- (void)markAsRead;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

typedef SWIFT_ENUM(NSInteger, Status) {
  StatusNone = 0,
  StatusReceptive = 1,
  StatusPending = 2,
  StatusAcknowledged = 3,
};


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEmojis")
@interface KarmiesEmojis : NSObject <NSCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class KarmiesLocation;
@class KarmiesLink;

SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesEntity")
@interface KarmiesEntity : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, strong) KarmiesLocation * _Nullable locationValue;
@property (nonatomic, strong) KarmiesLink * _Nullable linkValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value;
@end


/// Delegate that can present a Karmies feature.
SWIFT_PROTOCOL("_TtP10KarmiesSDK34KarmiesFeaturePresentationDelegate_")
@protocol KarmiesFeaturePresentationDelegate
- (UIViewController * _Nullable)karmiesPresentFeatureController:(UIViewController * _Nonnull)viewController;
- (void)karmiesDismissFeatureController;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesGeoplacement")
@interface KarmiesGeoplacement : KarmiesCategory
@property (nonatomic, copy) NSString * _Null_unspecified emoji;
@property (nonatomic, copy) NSArray<KarmiesArea *> * _Null_unspecified areas;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, KarmiesImageSize) {
  KarmiesImageSizeNormal = 0,
  KarmiesImageSizeLarge = 1,
};


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesImages")
@interface KarmiesImages : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns an image for a category.
/// \param category the category
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageFor:(KarmiesCategory * _Nonnull)category reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
/// Returns an image for an emoji name.
/// \param name the emoji name.
///
/// \param size the size to return (normal or large), defaults to normal.
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageWithNamed:(NSString * _Nonnull)name size:(enum KarmiesImageSize)size reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
/// Returns an image for an emoji.
/// \param emoji the emoji
///
/// \param size the size to return (normal or large), defaults to normal
///
/// \param reload flag to reload from network even if the image is cached
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param passiveReload flag to reload from network in the background after returning if the image was already cached
///
/// \param completion called with the image once loaded, synchronously if cached in memory else asynchronously unless sync is specified
///
- (void)imageFor:(KarmiesEmoji * _Nonnull)emoji size:(enum KarmiesImageSize)size reload:(BOOL)reload sync:(BOOL)sync passiveReload:(BOOL)passiveReload completion:(void (^ _Nullable)(UIImage * _Nullable))completion;
@end

@class UICollectionViewCell;

SWIFT_CLASS("_TtC10KarmiesSDK47KarmiesKeyboardCategoryCollectionViewController")
@interface KarmiesKeyboardCategoryCollectionViewController : UICollectionViewController <UICollectionViewDelegateFlowLayout>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK50KarmiesKeyboardCategoryContainerPageViewController")
@interface KarmiesKeyboardCategoryContainerPageViewController : UIPageViewController <UIPageViewControllerDataSource, UIPageViewControllerDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)pageViewController:(UIPageViewController * _Nonnull)pageViewController didFinishAnimating:(BOOL)finished previousViewControllers:(NSArray<UIViewController *> * _Nonnull)previousViewControllers transitionCompleted:(BOOL)completed;
- (nonnull instancetype)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary<NSString *, id> * _Nullable)options SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesKeyboardCollectionViewCell")
@interface KarmiesKeyboardCollectionViewCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIScrollView;

SWIFT_CLASS("_TtC10KarmiesSDK44KarmiesKeyboardEmojiCollectionViewController")
@interface KarmiesKeyboardEmojiCollectionViewController : UICollectionViewController <UICollectionViewDelegateFlowLayout>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)openDebug;
- (void)finishRefresh;
- (void)closeMenus;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumInteritemSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout minimumLineSpacingForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK27KarmiesKeyboardToggleButton")
@interface KarmiesKeyboardToggleButton : UIButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesKeyboardView")
@interface KarmiesKeyboardView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View controller that wraps the Karmies keyboard view for full screen use, such as in a Messages app extension.
SWIFT_CLASS("_TtC10KarmiesSDK29KarmiesKeyboardViewController")
@interface KarmiesKeyboardViewController : UIViewController <KarmiesUpdateHandler>
@property (nonatomic, strong) IBOutlet KarmiesKeyboardView * _Null_unspecified keyboardView;
- (void)viewDidLoad;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)karmiesDataReady;
- (void)karmiesDataUpdated;
- (void)prepareToTransition;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK11KarmiesLink")
@interface KarmiesLink : NSObject
@property (nonatomic, copy) NSString * _Nullable url;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesLocation")
@interface KarmiesLocation : NSObject
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable street;
@property (nonatomic, copy) NSString * _Nullable locality;
@property (nonatomic, copy) NSString * _Nullable phoneNumberDisplay;
@property (nonatomic, copy) NSString * _Nullable phoneNumberValue;
@property (nonatomic, copy) NSString * _Nullable website;
@property (nonatomic, copy) NSString * _Nullable priceLevel;
@property (nonatomic, copy) NSString * _Nullable rating;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPlacemark:(CLPlacemark * _Nonnull)placemark;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class CLLocationManager;
@class CLRegion;

SWIFT_CLASS("_TtC10KarmiesSDK22KarmiesLocationManager")
@interface KarmiesLocationManager : NSObject <CLLocationManagerDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
@end


SWIFT_CLASS("_TtC10KarmiesSDK13KarmiesLogger")
@interface KarmiesLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;
@class UIFont;

SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesMessages")
@interface KarmiesMessages : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Returns serialized message for the attributed text.
/// \param attributedText Attributed text containing emojis.
///
///
/// returns:
/// Plain text string with any emojis serializd into links.
- (NSString * _Nonnull)serializeMessageFrom:(NSAttributedString * _Nonnull)attributedText SWIFT_WARN_UNUSED_RESULT;
/// Deserializes a message with any embedded Karmies into an attributed string for display.
/// \param message the serialized message
///
/// \param outgoing is the message is outgoing/ingoing
///
/// \param sync flag to load synchronously even from disk, such as for during a drawing operation
///
/// \param completion called with an attributed string with any Karmies embedded once ready
///
- (void)deserializeMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing sync:(BOOL)sync completion:(void (^ _Nonnull)(NSAttributedString * _Nonnull))completion;
/// Checks if the message contains serialized emojis.
/// \param message The message.
///
///
/// returns:
/// True if it contains serialized emojis.
- (BOOL)isSerializedMessage:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Returns size of message after deserialization with the according parameters.
/// \param message The serialized message.
///
/// \param outgoing Is the message is outgoing/ingoing.
///
/// \param font The font for deserialized message.
///
/// \param maxWidth Maximum width of deserialized message.
///
///
/// returns:
/// The size of deserialized message.
- (CGSize)measureSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font maxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Draws the message with according parameters inside the frame.
/// \param message The serialized message.
///
/// \param outgoing Is the message outgoing.
///
/// \param frame The frame where the message will be drawn.
///
/// \param font The font for the message.
///
- (void)drawSerializedMessage:(NSString * _Nonnull)message outgoing:(BOOL)outgoing insideFrame:(CGRect)frame withFont:(UIFont * _Nonnull)font;
/// Returns the link from the message at the point if it’s presented.
/// \param point The point inside the message frame.
///
/// \param frame The message frame.
///
/// \param message The serialized message.
///
/// \param outgoing Is the message is outgoing/ingoing.
///
/// \param font The font for the message.
///
///
/// returns:
/// The link if it’s presented or nil.
- (NSString * _Nullable)linkAt:(CGPoint)point inside:(CGRect)frame with:(NSString * _Nonnull)message outgoing:(BOOL)outgoing font:(UIFont * _Nonnull)font SWIFT_WARN_UNUSED_RESULT;
/// Returns the link from the specified point in a text view.
/// \param point the point inside the message frame
///
/// \param textView the text view
///
/// \param outgoing true if the message is outgoing
///
///
/// returns:
/// the link if found else nil
- (NSString * _Nullable)linkAt:(CGPoint)point in:(UITextView * _Nonnull)textView outgoing:(BOOL)outgoing SWIFT_WARN_UNUSED_RESULT;
@end

@class MSConversation;
@class MSMessage;

/// Main app controller class for a Karmies powered Messages app. The message app should extend this to provide configuration and customization if desired.
SWIFT_CLASS("_TtC10KarmiesSDK32KarmiesMessagesAppViewController")
@interface KarmiesMessagesAppViewController : MSMessagesAppViewController <KarmiesFeaturePresentationDelegate>
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)willBecomeActiveWithConversation:(MSConversation * _Nonnull)conversation;
- (void)didResignActiveWithConversation:(MSConversation * _Nonnull)conversation;
- (void)didReceiveMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didStartSendingMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didCancelSendingMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle;
- (void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle;
- (void)willSelectMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
- (void)didSelectMessage:(MSMessage * _Nonnull)message conversation:(MSConversation * _Nonnull)conversation;
/// Show a child view controller in the current presentation style.
/// \param viewController The view controller.
///
/// \param presentationStyle The presentation style.
///
- (void)show:(UIViewController * _Nonnull)viewController with:(MSMessagesAppPresentationStyle)presentationStyle;
- (UIViewController * _Nullable)karmiesPresentFeatureController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
- (void)karmiesDismissFeatureController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK33KarmiesModalFeatureViewController")
@interface KarmiesModalFeatureViewController : UIViewController
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified wrapperView;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesOptions")
@interface KarmiesOptions : NSObject <NSCoding>
@property (nonatomic) BOOL realtimeAnalytics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end


SWIFT_CLASS("_TtC10KarmiesSDK14KarmiesPayload")
@interface KarmiesPayload : NSObject
@property (nonatomic, copy) NSString * _Nullable clazz;
@property (nonatomic, copy) NSString * _Nullable emoji;
@property (nonatomic, copy) NSArray<KarmiesEntity *> * _Nullable entities;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable feature;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithClazz:(NSString * _Nonnull)clazz emoji:(NSString * _Nonnull)emoji entities:(NSArray<KarmiesEntity *> * _Nonnull)entities;
@property (nonatomic, readonly, copy) NSURL * _Nonnull URL;
@property (nonatomic, readonly, copy) NSString * _Nonnull embedded;
@end


SWIFT_CLASS("_TtC10KarmiesSDK19KarmiesReachability")
@interface KarmiesReachability : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesRenderer")
@interface KarmiesRenderer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Resize an image.
/// \param image the image
///
/// \param size the new size
///
///
/// returns:
/// the resized image
- (UIImage * _Nonnull)resizeWithImage:(UIImage * _Nonnull)image size:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesResources")
@interface KarmiesResources : NSObject
@property (nonatomic, readonly, strong) NSBundle * _Nullable bundle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK16KarmiesRoundView")
@interface KarmiesRoundView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, KarmiesTooltipType) {
  KarmiesTooltipTypeToggle = 0,
  KarmiesTooltipTypeInput = 1,
  KarmiesTooltipTypeMessage = 2,
};


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesTooltips")
@interface KarmiesTooltips : NSObject
/// Show a Karmies tooltip for the view.
/// \param view the view
///
/// \param type the tooltip type
///
/// \param offset offset from view edge for tooltip arrow, centered if less than zero, defaults to centered
///
/// \param force flag to show even if it has been shown once before, defaults to false
///
- (void)showTooltipFor:(UIView * _Nonnull)view type:(enum KarmiesTooltipType)type offset:(CGFloat)offset force:(BOOL)force;
- (void)hideTooltip;
- (void)resetTooltips;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10KarmiesSDK15KarmiesUnicodes")
@interface KarmiesUnicodes : NSObject <NSCoding>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC10KarmiesSDK12KarmiesUtils")
@interface KarmiesUtils : NSObject
/// Creates UIFont object for the CTFont object using name and size.
+ (UIFont * _Nonnull)fontFromCTFont:(CTFontRef _Nonnull)font SWIFT_WARN_UNUSED_RESULT;
/// Modifies UITextView object’s text insets and placeholder view to make free space on the left to place button there.
+ (void)placeButton:(UIButton * _Nonnull)button onLeftOf:(UITextView * _Nonnull)textView withPlaceholder:(UIView * _Nullable)placeholderView in:(UIView * _Nullable)superview;
/// Determine current suggest text for a text view.
/// \param textView the text view
///
///
/// returns:
/// the suggest text
+ (NSString * _Nonnull)suggestTextFor:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// Determine current replace text for a text view.
/// \param textView the text view
///
///
/// returns:
/// the replace text
+ (NSString * _Nonnull)replaceTextFor:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKWebView;
@class WKNavigation;

SWIFT_CLASS("_TtC10KarmiesSDK24KarmiesWebViewController")
@interface KarmiesWebViewController : UIViewController <WKNavigationDelegate>
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (void)webView:(WKWebView * _Nonnull)webView didCommitNavigation:(WKNavigation * _Null_unspecified)navigation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class WKNavigationAction;

SWIFT_CLASS("_TtC10KarmiesSDK31KarmiesWebFeatureViewController")
@interface KarmiesWebFeatureViewController : KarmiesWebViewController
@property (nonatomic, strong) KarmiesEmoji * _Nonnull emoji;
@property (nonatomic, copy) NSString * _Nullable categoryName;
@property (nonatomic, copy) void (^ _Nullable completionHandler)(NSString * _Nullable);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)openURL:(NSURL * _Nonnull)url;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url topOffset:(CGFloat)topOffset bottomOffset:(CGFloat)bottomOffset SWIFT_UNAVAILABLE;
@end

@class UIImagePickerController;

@interface KarmiesWebFeatureViewController (SWIFT_EXTENSION(KarmiesSDK)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *, id> * _Nonnull)info;
@end







SWIFT_CLASS("_TtC10KarmiesSDK15SessionDelegate")
@interface SessionDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)respondsToSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didWriteData:(int64_t)bytesWritten totalBytesWritten:(int64_t)totalBytesWritten totalBytesExpectedToWrite:(int64_t)totalBytesExpectedToWrite;
- (void)URLSession:(NSURLSession * _Nonnull)session downloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask didResumeAtOffset:(int64_t)fileOffset expectedTotalBytes:(int64_t)expectedTotalBytes;
@end

@class NSURLSessionStreamTask;
@class NSOutputStream;

@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionStreamDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session readClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session writeClosedForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session betterRouteDiscoveredForStreamTask:(NSURLSessionStreamTask * _Nonnull)streamTask;
- (void)URLSession:(NSURLSession * _Nonnull)session streamTask:(NSURLSessionStreamTask * _Nonnull)streamTask didBecomeInputStream:(NSInputStream * _Nonnull)inputStream outputStream:(NSOutputStream * _Nonnull)outputStream;
@end


@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(enum NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didBecomeDownloadTask:(NSURLSessionDownloadTask * _Nonnull)downloadTask;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask willCacheResponse:(NSCachedURLResponse * _Nonnull)proposedResponse completionHandler:(void (^ _Nonnull)(NSCachedURLResponse * _Nullable))completionHandler;
@end

@class NSURLSessionTaskMetrics;

@interface SessionDelegate (SWIFT_EXTENSION(KarmiesSDK)) <NSURLSessionTaskDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(enum NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics SWIFT_AVAILABILITY(tvos,introduced=10.0) SWIFT_AVAILABILITY(macos,introduced=10.12) SWIFT_AVAILABILITY(ios,introduced=10.0);
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end





























SWIFT_CLASS("_TtC10KarmiesSDK18UploadTaskDelegate")
@interface UploadTaskDelegate : DataTaskDelegate
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
